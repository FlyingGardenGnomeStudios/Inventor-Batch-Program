<?xml version="1.0"?>
<doc>
<assembly>
<name>
WinControls.ListView
</name>
</assembly>
<members>
<member name="M:WinControls.ListView.Collections.ContainerListViewObjectCollection.#ctor">
	<summary>
 Creates a New instance of ContainerListViewObjectCollection.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewObjectCollection.#ctor(WinControls.ListView.ContainerListView)">
	<summary>
 Creates a New instance of ContainerListViewItemCollection.
 </summary>
	<param name="aParent">The Owner of the collection.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Collections.ContainerListViewObjectCollection.IsReadOnly">
	<summary>
 Gets a value indicating whether the collection is Read-only.
 </summary>
	<value><c>TRUE</c> if the collection is read-only; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewObjectCollection.Contains(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Determines if an Item is in the collection.
 </summary>
	<param name="aItem">The Item to search for.</param>
	<returns><c>TRUE</c> if the Item is in the collection; otherwise <c>FALSE</c>.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewObjectCollection.CopyTo(System.Array,System.Int32)">
	<summary>
 Copies the contents of the collection to an array at the specified index.
 </summary>
	<param name="aArray">The array to copy the Items of the collection to.</param>
	<param name="aIndex">The Index to start the copying at.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewObjectCollection.IndexOf(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Returns the Index of the specified Item in the collection.
 </summary>
	<param name="aItem">The Item to search for.</param>
	<returns>An Integer.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewObjectCollection.OnAddProcessing(WinControls.ListView.ContainerListViewObject,System.Int32)">
	<summary>
 Occurs after an add or insert to the collection.
 </summary>
	<param name="aClObj">The Item that was added.</param>
	<param name="aIndex">The Index where the Item was added.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewObjectCollection.OnClear">
	<summary>
 Overriden.  Performs additional custom processes when clearing the contents of the CollectionBase instance.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewObjectCollection.OnClearComplete">
	<summary>
 Overriden.  Performs additional custom processes after clearing the contents of the CollectionBase instance.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewObjectCollection.OnInsertComplete(System.Int32,System.Object)">
	<summary>
 Overriden.  Performs additional custom processes after inserting a new element into the CollectionBase instance.
 </summary>
	<param name="index">The Index of the Item that was added.</param>
	<param name="value">The Value of the Item.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewObjectCollection.OnRemoveComplete(System.Int32,System.Object)">
	<summary>
 Overriden.  Performs additional custom processes after removing an element from the CollectionBase instance.
 </summary>
	<param name="index">The Index of the Item that was removed.</param>
	<param name="value">The Value of the Item.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewObjectCollection.OnRemoveProcessing(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Occurs after an Item has been removed from the collection.
 </summary>
	<param name="aCObj">The Item that was removed from the collection.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewObjectCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
	<summary>
 Overriden.  Performs additional custom processes after setting a value in the CollectionBase instance.
 </summary>
	<param name="index">The Index of the Item changed.</param>
	<param name="oldValue">The old value of the Item.</param>
	<param name="newValue">The new value of the Item.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewObjectCollection.Remove(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Removes an Item from the collection.
 </summary>
	<param name="aItem">The Item to remove.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewObjectCollection.Sort">
	<summary>
 Sorts the elements in the entire Collection using the specified comparer.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Collections.ContainerListViewObjectCollection">
	<summary>
 ContainerListViewObjectCollection Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewItemCollection.#ctor">
	<summary>
 Creates a New instance of ContainerListViewObjectCollection.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewItemCollection.#ctor(WinControls.ListView.ContainerListView)">
	<summary>
 Creates a New instance of ContainerListViewItemCollection.
 </summary>
	<param name="aParent">The Owner of the collection.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Collections.ContainerListViewItemCollection.Item(System.Int32)">
	<summary>
 Gets or Sets the Item in the Collection.
 </summary>
	<param name="aIndex">The Index of the item to get or set.</param>
	<value></value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewItemCollection.Add(WinControls.ListView.ContainerListViewItem)">
	<summary>
 Adds a Item to the collection.
 </summary>
	<param name="aItem">The Item to Add.</param>
	<returns>An Integer representing the zero-based Index within the collection.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewItemCollection.Add(System.String,System.Int32)">
	<summary>
 Adds a Item to the collection.
 </summary>
	<param name="aText">The Text of the ContainerListViewItem.</param>
	<param name="aImageIndex">Optional.  A Index of the Image to display.</param>
	<returns>The newly added item.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewItemCollection.AddRange(WinControls.ListView.ContainerListViewItem[])">
	<summary>
 Adds an array of Items.
 </summary>
	<param name="Items">The Items to add.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewItemCollection.Insert(WinControls.ListView.ContainerListViewItem,System.Int32)">
	<summary>
 Inserts an Item at the specified position.
 </summary>
	<param name="aItem">The ContainerListViewItem to insert.</param>
	<param name="aIndex">The zero-based index at which the item should be inserted.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewItemCollection.OnAddProcessing(WinControls.ListView.ContainerListViewObject,System.Int32)">
	<summary>
 Overriden.  Occurs after an add or insert to the collection.
 </summary>
	<param name="aClObj">The Item that was added.</param>
	<param name="aIndex">The Index where the Item was added.</param>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Collections.ContainerListViewItemCollection">
	<summary>
 Strongly typed collection of ContainerListViewItem objects.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.TreeListNodeCollection.#ctor(WinControls.ListView.TreeListNode)">
	<summary>
 Creates a New instance of TreeListNodeCollection.
 </summary>
	<param name="aParentNode">The TreeListNode that owns the collection.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.TreeListNodeCollection.#ctor(WinControls.ListView.TreeListNode,WinControls.ListView.TreeListView)">
	<summary>
 Creates a New instance of TreeListNodeCollection.
 </summary>
	<param name="aTree">The TreeListView that the collection is a part of.</param>
	<param name="aVirtualNode">The VirtualRootNode that owns the collection.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Collections.TreeListNodeCollection.Count">
	<summary>
 Gets the number of TreeListNodes in the current collection. This DOES NOT include any children of the nodes in the current collection.
 </summary>
	<value>An Integer representing the current count of TreeListNodes in the collection.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Collections.TreeListNodeCollection.Item(System.Int32)">
	<summary>
 Gets or Sets the Item in the Collection.
 </summary>
	<param name="aIndex">The Index of the item to get or set.</param>
	<value></value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.TreeListNodeCollection.Add(WinControls.ListView.TreeListNode)">
	<summary>
 Adds an Item to the collection.
 </summary>
	<param name="aNode">The TreeListNode to Add.</param>
	<returns>An Integer representing the zero-based Index within the collection.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.TreeListNodeCollection.Add(System.String,System.Int32,System.Int32)">
	<summary>
 Adds an Item to the collection.
 </summary>
	<param name="aText">The Text of the new TreeListNode.</param>
	<param name="aImageIndex">Optional.  The ImageIndex of the TreeListNode.</param>
	<param name="aSelImageIndex">Optional.  The SelectedImageIndex of the TreeListNode.</param>
	<returns>A newly created TreeListNode that was just added to the collection.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.TreeListNodeCollection.AddRange(WinControls.ListView.TreeListNode[])">
	<summary>
 Adds an array of Items.
 </summary>
	<param name="aNodes">The array of TreeListNodes to add.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.TreeListNodeCollection.Insert(WinControls.ListView.TreeListNode,System.Int32)">
	<summary>
 Inserts an Item at the specified position.
 </summary>
	<param name="aNode">The TreeListNode to insert.</param>
	<param name="aIndex">The zero-based index at which the item should be inserted.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.TreeListNodeCollection.OnAddProcessing(WinControls.ListView.ContainerListViewObject,System.Int32)">
	<summary>
 Overriden.  Occurs after an add or insert to the collection.
 </summary>
	<param name="aClObj">The Item that was added.</param>
	<param name="aIndex">The Index where the Item was added.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.TreeListNodeCollection.OnRemove(System.Int32,System.Object)">
	<summary>
 Overriden.  Does post-processing before an Item has been removed.
 </summary>
	<param name="index">The Index of the Item that was removed.</param>
	<param name="value">The Value of the Item.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.TreeListNodeCollection.OnRemoveProcessing(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Overriden.  Occurs after an Item has been removed from the collection.
 </summary>
	<param name="aCObj">The Item that was removed from the collection.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.TreeListNodeCollection.Sort">
	<summary>
 Overriden.  Sorts the elements in the entire Collection.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Collections.TreeListNodeCollection">
	<summary>
 Strongly typed collection of TreeListNode objects.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewReadOnlyCollection.#ctor(WinControls.ListView.ContainerListView)">
	<summary>
 Creates a New instance of ContainerListViewReadOnlyCollection.
 </summary>
	<param name="aListView">The ContainerListView the collection belongs to.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewReadOnlyCollection.#ctor(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Creates a New instance of ContainerListViewReadOnlyCollection.
 </summary>
	<param name="aParent">The ContainerListViewObject the collection belongs to.</param>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Collections.ContainerListViewReadOnlyCollection._Owner">
	<summary>
 Variable that stores the ContainerListView (if any) that owns this collection.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Collections.ContainerListViewReadOnlyCollection._Parent">
	<summary>
 Variable that stores the ContainerListViewObject that is the parent of this collection.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewReadOnlyCollection.Clear">
	<summary>
 Removes all Items from the collection.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewReadOnlyCollection.CopyTo(System.Array,System.Int32)">
	<summary>
 Copies the entire Collection to the compatible array starting at the specified Index.
 </summary>
	<param name="aArray">The Array to copy all Items of the collection to.</param>
	<param name="aIndex">The Index to start copying at.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewReadOnlyCollection.Contains(System.Object)">
	<summary>
 Determines if an Item is in the collection.
 </summary>
	<param name="aItem">The Item to search for.</param>
	<returns><c>TRUE</c> if the Item is in the collection; otherwise <c>FALSE</c>.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewReadOnlyCollection.IndexOf(System.Object)">
	<summary>
 Returns the Index of the specified Item in the collection.
 </summary>
	<param name="aItem">The Item to search for.</param>
	<returns>An Integer.</returns>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Collections.ContainerListViewReadOnlyCollection">
	<summary>
 Strongly typed collection of ContainerListViewReadOnlyCollection objects.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.HiddenColumnsCollection.#ctor(WinControls.ListView.ContainerListView)">
	<summary>
 Creates a New instance of SelectedIndexCollection.
 </summary>
	<param name="aListView">The ContainerListView the collection belongs to.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Collections.HiddenColumnsCollection.Item(System.Int32)">
	<summary>
 Gets the Item in the Collection.
 </summary>
	<param name="aIndex">The Index of the item to get.</param>
	<value>A ContainerColumnHeader at the specified index</value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.HiddenColumnsCollection.Add(WinControls.ListView.ContainerColumnHeader)">
	<summary>
 Adds an Item to the collection.
 </summary>
	<param name="aItem">The ContainerColumnHeader to add to the collection.</param>
	<returns>The Index of the Item in the collection; otherwise -1 if the Item was not added.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.HiddenColumnsCollection.Remove(WinControls.ListView.ContainerColumnHeader)">
	<summary>
 Removes an Item from the collection.
 </summary>
	<param name="aItem">The ContainerColumnHeader to remove.</param>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Collections.HiddenColumnsCollection">
	<summary>
 Strongly typed collection of HiddenColumnsCollection ContainerColumnHeaders.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.CheckedContainerListViewObjectCollection.#ctor(WinControls.ListView.ContainerListView)">
	<summary>
 Creates a New instance of CheckedContainerListViewItemCollection.
 </summary>
	<param name="aListView">The ContainerListView the collection belongs to.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Collections.CheckedContainerListViewObjectCollection.Item(System.Int32)">
	<summary>
 Gets the Item in the Collection.
 </summary>
	<param name="aIndex">The Index of the item to get.</param>
	<value>A ContainerListViewItem at the specified index</value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.CheckedContainerListViewObjectCollection.Add(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Adds an Item to the collection.
 </summary>
	<param name="aClObj">The ContainerListViewObject to add to the collection.</param>
	<returns>The Index of the ContainerListViewObject in the collection; otherwise -1 if the ContainerListViewObject was not added.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.CheckedContainerListViewObjectCollection.Remove(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Removes an Item from the collection.
 </summary>
	<param name="aClObj">The ContainerListViewObject to remove.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.CheckedContainerListViewObjectCollection.Clear">
	<summary>
 Removes all Items from the collection.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Collections.CheckedContainerListViewObjectCollection">
	<summary>
 Strongly typed collection of ContainerListViewItem objects that are in a checked state.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerColumnHeaderCollection.#ctor">
	<summary>
 Creates a New instance of SelectedContainerListViewItemCollection.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerColumnHeaderCollection.#ctor(WinControls.ListView.ContainerListView)">
	<summary>
 Creates a New instance of SelectedContainerListViewItemCollection.
 </summary>
	<param name="aParent">The owner of the collection.</param>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.Collections.ContainerColumnHeaderCollection.ItemsChanged">
	<summary>
 Occurs when an has been added, removed, changed, or cleared from the collection.
 </summary>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Collections.ContainerColumnHeaderCollection.Item(System.Int32)">
	<summary>
 Gets or Sets the Item in the Collection.
 </summary>
	<param name="aIndex">The Index of the item to get or set.</param>
	<value></value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerColumnHeaderCollection.Add(WinControls.ListView.ContainerColumnHeader)">
	<summary>
 Adds a Item to the collection.
 </summary>
	<param name="aItem">The Item to Add.</param>
	<returns>An Integer representing the zero-based Index within the collection.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerColumnHeaderCollection.Add(System.String,System.Int32,System.Windows.Forms.HorizontalAlignment)">
	<summary>
 Adds an Item to the collection.
 </summary>
	<param name="aText">The Title of the Column.</param>
	<param name="aWidth">The Width of the Column.</param>
	<param name="aAlign">The Text alignment.</param>
	<returns>A newly created ContainerColumnHeader object.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerColumnHeaderCollection.AddRange(WinControls.ListView.ContainerColumnHeader[])">
	<summary>
 Adds an array of Items.
 </summary>
	<param name="Items">The Items to add.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerColumnHeaderCollection.Contains(WinControls.ListView.ContainerColumnHeader)">
	<summary>
 Determines if an Item is in the collection.
 </summary>
	<param name="aItem">The Item to search for.</param>
	<returns><c>TRUE</c> if the Item is in the collection; otherwise <c>FALSE</c>.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerColumnHeaderCollection.IndexOf(WinControls.ListView.ContainerColumnHeader)">
	<summary>
 Returns the Index of the specified Item in the collection.
 </summary>
	<param name="aItem">The Item to search for.</param>
	<returns>An Integer.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerColumnHeaderCollection.Insert(WinControls.ListView.ContainerColumnHeader,System.Int32)">
	<summary>
 Inserts an Item at the specified position.
 </summary>
	<param name="aItem">The ContainerColumnHeader to insert.</param>
	<param name="aIndex">The zero-based index at which the item should be inserted.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerColumnHeaderCollection.OnClear">
	<summary>
 Does pre-processing of items in the list before removing them.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerColumnHeaderCollection.OnClearComplete">
	<summary>
 Raises the ItemsChanged event.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerColumnHeaderCollection.OnInsertComplete(System.Int32,System.Object)">
	<summary>
 Does post-processing after an Item has been added.
 </summary>
	<param name="index">The Index of the Item that was added.</param>
	<param name="value">The Value of the Item.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerColumnHeaderCollection.OnRemoveComplete(System.Int32,System.Object)">
	<summary>
 Does post-processing after an Item has been removed.
 </summary>
	<param name="index">The Index of the Item that was removed.</param>
	<param name="value">The Value of the Item.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerColumnHeaderCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
	<summary>
 Does post-processing after an Item's value has been changed.
 </summary>
	<param name="index">The Index of the Item changed.</param>
	<param name="oldValue">The old value of the Item.</param>
	<param name="newValue">The new value of the Item.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerColumnHeaderCollection.Remove(WinControls.ListView.ContainerColumnHeader)">
	<summary>
 Removes an Item from the collection.
 </summary>
	<param name="aItem">The Item to remove.</param>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Collections.ContainerColumnHeaderCollection">
	<summary>
 Strongly typed collection of ContainerColumnHeader objects.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.#ctor">
	<summary>
 Creates a New instance of ContainerListViewSubItemCollection.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.#ctor(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Creates a New instance of ContainerListViewSubItemCollection.
 </summary>
	<param name="aParent">The Parent this collection belongs to.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Collections.ContainerListViewSubItemCollection.Item(System.Int32)">
	<summary>
 Gets or Sets the SubItem in the Collection.
 </summary>
	<param name="aIndex">The Index of the item to get or set.</param>
	<value></value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.Add(WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem)">
	<summary>
 Adds a SubItem to the collection.
 </summary>
	<param name="aSubItem">The SubItem to Add.</param>
	<returns>An Integer representing the zero-based Index within the collection.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.Add(System.String)">
	<summary>
 Adds a SubItem to the collection.
 </summary>
	<param name="aText">The Text to create a New SubItem for.</param>
	<returns>A newly created ContainerListViewSubItem.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.Add(System.Windows.Forms.Control)">
	<summary>
 Adds a SubItem to the collection.
 </summary>
	<param name="aControl">The control to create a New SubItem for.</param>
	<returns>A newly created ContainerListViewSubItem.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.AddRange(WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem[])">
	<summary>
 Adds an array of Items.
 </summary>
	<param name="Items">The Items to add.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.Contains(WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem)">
	<summary>
 Determines if an Item is in the collection.
 </summary>
	<param name="aSubItem">The Item to search for.</param>
	<returns><c>TRUE</c> if the Item is in the collection; otherwise <c>FALSE</c>.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.CopyTo(System.Array,System.Int32)">
	<summary>
 Copies the contents of the collection to an array at the specified index.
 </summary>
	<param name="aArray">The array to copy the Items of the collection to.</param>
	<param name="aIndex">The Index to start the copying at.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.IndexOf(WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem)">
	<summary>
 Returns the Index of the specified Item in the collection.
 </summary>
	<param name="aSubItem">The Item to search for.</param>
	<returns>An Integer.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.Insert(WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem,System.Int32)">
	<summary>
 Inserts an Item at the specified position.
 </summary>
	<param name="aSubItem">The ContainerListViewSubItem to insert.</param>
	<param name="aIndex">The zero-based index at which the item should be inserted.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.OnClear">
	<summary>
 Does pre-processing of items in the list before removing them.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.OnClearComplete">
	<summary>
 Raises the ItemsChanged event.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.OnInsertComplete(System.Int32,System.Object)">
	<summary>
 Does post-processing after an Item has been added.
 </summary>
	<param name="index">The Index of the Item that was added.</param>
	<param name="value">The Value of the Item.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.OnRemoveComplete(System.Int32,System.Object)">
	<summary>
 Does post-processing after an Item has been removed.
 </summary>
	<param name="index">The Index of the Item that was removed.</param>
	<param name="value">The Value of the Item.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
	<summary>
 Does post-processing after an Item's value has been changed.
 </summary>
	<param name="index">The Index of the Item changed.</param>
	<param name="oldValue">The old value of the Item.</param>
	<param name="newValue">The new value of the Item.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.ContainerListViewSubItemCollection.Remove(WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem)">
	<summary>
 Removes an Item from the collection.
 </summary>
	<param name="aSubItem">The Item to remove.</param>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Collections.ContainerListViewSubItemCollection">
	<summary>
 Strongly typed collection of ContainerListViewSubItem objects.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.SelectedContainerListViewObjectCollection.#ctor(WinControls.ListView.ContainerListView)">
	<summary>
 Creates a New instance of SelectedContainerListViewItemCollection.
 </summary>
	<param name="aListView">The ContainerListView the collection belongs to.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Collections.SelectedContainerListViewObjectCollection.Item(System.Int32)">
	<summary>
 Gets the Item in the Collection.
 </summary>
	<param name="aIndex">The Index of the item to get.</param>
	<value>A ContainerListViewObject at the specified index</value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.SelectedContainerListViewObjectCollection.Add(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Adds an Item to the collection.
 </summary>
	<param name="aClObj">The ContainerListViewObject to add to the collection.</param>
	<returns>The Index of the ContainerListViewObject in the collection; otherwise -1 if the ContainerListViewObject was not added.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.SelectedContainerListViewObjectCollection.Remove(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Removes an Item from the collection.
 </summary>
	<param name="aClObj">The ContainerListViewObject to remove.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.SelectedContainerListViewObjectCollection.Clear">
	<summary>
 Removes all Items from the collection.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Collections.SelectedContainerListViewObjectCollection">
	<summary>
 Strongly typed collection of ContainerListViewItem objects that are in a selected state.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.SelectedIndexCollection.#ctor(WinControls.ListView.ContainerListView)">
	<summary>
 Creates a New instance of SelectedIndexCollection.
 </summary>
	<param name="aListView">The ContainerListView the collection belongs to.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Collections.SelectedIndexCollection.Item(System.Int32)">
	<summary>
 Gets the Item in the Collection.
 </summary>
	<param name="aIndex">The Index of the item to get.</param>
	<value>An Integer representing the Index of the SelectedItem.</value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.SelectedIndexCollection.Add(System.Int32)">
	<summary>
 Adds an Item to the collection.
 </summary>
	<param name="aIndex">The Index of the ContainerListViewItem to add to the collection.</param>
	<returns>The Index of the ContainerListViewItem in the collection; otherwise -1 if the ContainerListViewItem was not added.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Collections.SelectedIndexCollection.Remove(System.Int32)">
	<summary>
 Removes an Item from the collection.
 </summary>
	<param name="aIndex">The Index of the ContainerListViewItem to remove.</param>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Collections.SelectedIndexCollection">
	<summary>
 Strongly typed collection of Integers (representing Indexes) of ContainerListViewItem objects that are in a selected state.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.#ctor">
	<summary>
 Creates a New instance of TreeListView.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.TreeListView.AfterCollapse">
	<summary>
 Occurs after the TreeListNode has collapsed.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.TreeListView.AfterExpand">
	<summary>
 Occurs after the TreeListNode has expanded.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.TreeListView.BeforeCollapse">
	<summary>
 Occurs before the TreeListNode is collapsed.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.TreeListView.BeforeExpand">
	<summary>
 Occurs before the TreeListNode is expanded.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.TreeListView.ItemDrag">
	<summary>
 Occurs when the user begins dragging a node.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.TreeListView.ItemDrop">
	<summary>
 Occurs when the user has dropped data on a node.
 </summary>
	<remarks>
 This event will NOT fire if property AllowDefaultDragDrop=<c>FALSE</c>.  This is only a convenience event for the developer so 
 they don't have to handle the normal DragDrop event during drag operations.  Also, it will only fire if the user is 
 dragging nodes from within the control itself.  If you are expecting any outside dragging onto this control, you will have 
 to handle the normal DragDrop event.
 </remarks>
</member><member name="P:WinControls.ListView.TreeListView.AllowDefaultDragDrop">
	<summary>
 Gets or Sets a value that determines if the control will implement the DragDrop behavior within itself (not accepting 
 data from other sources).  If setting this property to <c>TRUE</c> you must also set the 'AllowDrop' property to <c>TRUE</c> in 
 order for it to work.
 </summary>
	<value><c>TRUE</c> if the control will implement it's own, default DragDrop behavior; otherwise <c>FALSE</c> if the DragDrop behavior will be implemented by the developer.</value>
	<remarks>
 If <c>TRUE</c>, then the only events that need to be handled are the ItemDrag and ItemDrop events.  Otherwise typical Microsoft 
 drag and drop events should be handled for the desired effect.
 NOTE:  The ItemDrag event will always be fired regardless if this property is <c>TRUE</c> or <c>FALSE</c>.
 </remarks>
</member><member name="P:WinControls.ListView.TreeListView.AlwaysShowPlusMinus">
	<summary>
 Gets or Sets a value that determines if Plus and Minus signs are always shown next to each node.
 </summary>
	<value><c>TRUE</c> if Plus and Minus signs are always shown next to each node; otherwise <c>FALSE</c>.  The default is <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.DragScrollIncrement">
	<summary>
 Gets or Sets the amount the Vertical scroll will increment whenever a node or nodes are being dragged out of the visible area.  
 The lareger the number, the faster the scroll.
 </summary>
	<value>An Integer value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.FocusedNode">
	<summary>
 Gets the currently Focused TreeListNode.
 </summary>
	<value>A TreeListNode with the current focus.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.Font">
	<summary>
 Overriden.  Gets or Sets the Font used to display text in the control.
 </summary>
	<value>A Font value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.ForeColor">
	<summary>
 Overriden.  Gets or Sets the foreground color used to display text and graphics in the control.
 </summary>
	<value>A Color value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.GridLines">
	<summary>
 Shadowed.  Gets or Sets a value that determines which gridlines will be shown.
 </summary>
	<value>An enumerated type specifying which gridlines are shown on the control.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.DefaultFolderImages">
	<summary>
 Gets or Sets a value that determines if the control should use the default open/closed folder images for nodes.
 </summary>
	<value><c>TRUE</c> if the control should use the default open/closed folder images; otherwise <c>FALSE</c> if not.</value>
	<remarks>NOTE:  Any custom image list will be overwritten with the default, internal image list if this is set to <c>TRUE</c>.</remarks>
</member><member name="P:WinControls.ListView.TreeListView.DefaultImageIndex">
	<summary>
 Gets or Sets the default image index to use when creating nodes.
 </summary>
	<value>The default zero-based index of the image in the ImageList that is displayed for the TreeListNode when it is created. The default is 0.</value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.DefaultSelectedImageIndex">
	<summary>
 Gets or Sets the default selected image index to use when creating nodes.
 </summary>
	<value>The zero-based default selected index of the image in the ImageList that is displayed for the TreeListNode when it is created. The default is 1.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.IndentSize">
	<summary>
 Gets or Sets the Indent value of child nodes (in pixels)
 </summary>
	<value>An Integer representing the Indent value of child nodes.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.Items">
	<summary>
 Overriden.  Gets the Items contained in the control.
 </summary>
	<value>A ContainerListViewItemCollection.</value>
	<remarks>Items collection only used for a ContainerListView.  Use the Nodes collection instead.</remarks>
</member><member name="P:WinControls.ListView.TreeListView.Nodes">
	<summary>
 Gets the child Nodes of the current Tree.
 </summary>
	<value>A TreeListNode collection.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.PathSeparator">
	<summary>
 Gets or Sets the string to use as the path separator when using the FullPath property on a TreeListNode.
 </summary>
	<value>A String value.  Default is '\' (without the quotes).</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.RootLineColor">
	<summary>
 Gets or Sets a value that determines the Color used for drawing Root lines of TreeListNodes.
 </summary>
	<value>A Color.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.RowHeight">
	<summary>
 Gets or Sets the RowHeight of the Items in the listview.
 </summary>
	<value>An Integer representing the row height.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.SelectedIndexes">
	<summary>
 Gets the indexes of the Selected items in the control.
 </summary>
	<value>A collection of selected Indices</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.ShowLines">
	<summary>
 Gets or Sets a value that determines if Lines are shown between sibling nodes and between parent and child nodes.
 </summary>
	<value><c>TRUE</c> if Lines are shown between sibling nodes and between parent and child nodess; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.ShowPlusMinus">
	<summary>
 Gets or Sets a value that determines whether plus/minus signs are shown next to parent nodes.
 </summary>
	<value><c>TRUE</c> if plus/minus signs are shown; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListView.ShowRootLines">
	<summary>
 Gets or Sets a value that determines if Lines are shown between Root nodes.
 </summary>
	<value><c>TRUE</c> if Lines are show between Root nodes; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.CollapseAll">
	<summary>
 Collapses every TreeListNode in the control.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.ExpandAll">
	<summary>
 Expands every TreeListNode in the control.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.GetCompleteItemBounds(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Overriden.  Returns the bounding Rectangle of the TreeListNode and it's SubItems.
 </summary>
	<param name="aObj">The TreeListNode whose rectangle to return.</param>
	<returns>A Rectangle.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.GetItemAt(System.Drawing.Point)">
	<summary>
 Retrieves the TreeListNode at the specified position.
 </summary>
	<param name="aPoint">The Point the TreeListNode is at.</param>
	<returns>A TreeListNode; otherwise <c>NOTHING</c> if there is no TreeListNode at the specified point.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.GetItemAt(System.String)">
	<summary>
 Retrieves a TreeListNode based upon the specified Path (path must be fully qualified).
 </summary>
	<param name="aNodePath">The Path of the Node to retrieve.</param>
	<returns>A TreeListNode ojbect; otherwise <c>NOTHING</c> if the node cannot be located within the specified path.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.GetItemBounds(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Overriden.  Returns the bounding Rectangle of the TreeListNode only.
 </summary>
	<param name="aObj">The TreeListNode whose rectangle to return.</param>
	<returns>A Rectangle.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.GetNextNode(WinControls.ListView.TreeListNode)">
	<summary>
 Gets the Next node relative to the specified node.
 </summary>
	<param name="aNode">The Node whose next node to retrieve.</param>
	<returns>A TreeListNode; otherwise <c>NOTHING</c> if no node can be found.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.GetNodeCount(System.Boolean)">
	<summary>
 Returns the number of child tree nodes.
 </summary>
	<param name="aIncludeSubTrees"><c>TRUE</c> if the resulting count includes all nodes indirectly rooted at this node; otherwise <c>FALSE</c>.</param>
	<returns>An integer representing the number of child nodes.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.GetPreviousNode(WinControls.ListView.TreeListNode)">
	<summary>
 Gets the Prior node relative to the specified node.
 </summary>
	<param name="aNode">The Node whose prior node to retrieve.</param>
	<returns>A TreeListNode; otherwise <c>NOTHING</c> if no previous node can be found.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnAdjustScrollBars">
	<summary>
 Overriden.  Occurs when the ScrollBars need to be setup and displayed by the control.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnAfterCollapse(WinControls.ListView.EventArgClasses.TreeListViewEventArgs)">
	<summary>
 Raises the AfterCollapse event.
 </summary>
	<param name="e">A TreeListViewEventArg that contains the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnAfterExpand(WinControls.ListView.EventArgClasses.TreeListViewEventArgs)">
	<summary>
 Raises the AfterExpand event.
 </summary>
	<param name="e">A TreeListViewEventArg that contains the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnBeforeCollapse(WinControls.ListView.EventArgClasses.TreeListViewCancelEventArgs)">
	<summary>
 Raises the BeforeCollapse event.
 </summary>
	<param name="e">A TreeListViewCancelEventArg that contains the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnBeforeExpand(WinControls.ListView.EventArgClasses.TreeListViewCancelEventArgs)">
	<summary>
 Raises the BeforeExpand event.
 </summary>
	<param name="e">A TreeListViewCancelEventArg that contains the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnDragEnter(System.Windows.Forms.DragEventArgs)">
	<summary>
 Overriden.  Raises the DragEnter event.
 </summary>
	<param name="drgevent">A DragEventArgs that contains the event data. </param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnDragDrop(System.Windows.Forms.DragEventArgs)">
	<summary>
 Overriden.  Raises the DragDrop event.
 </summary>
	<param name="drgevent">A DragEventArgs that contains the event data. </param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnDragLeave(System.EventArgs)">
	<summary>
 Overriden.  Raises the DragEnter event.
 </summary>
	<param name="e">The EventArg containing the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnDragOver(System.Windows.Forms.DragEventArgs)">
	<summary>
 Overriden.  Raises the DragOver event.
 </summary>
	<param name="drgevent">A DragEventArgs that contains the event data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnDrawRows(System.Drawing.Graphics,System.Drawing.Rectangle)">
	<summary>
 Overriden.  Draws the Rows of the control.
 </summary>
	<param name="aGr">A Graphics object to draw with.</param>
	<param name="Rect">A Rectangle to draw in.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
	<summary>
 Overriden.  Raises the GiveFeedback event.
 </summary>
	<param name="gfbevent">A GiveFeedbackEventArgs that contains the event data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnItemDrag(WinControls.ListView.EventArgClasses.TreeListViewItemDragEventArgs)">
	<summary>
 Raises the ItemDrag event.
 </summary>
	<param name="e">The TreeListViewItemDragEventArg containing the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnItemDrop(WinControls.ListView.EventArgClasses.TreeListViewItemDropEventArgs)">
	<summary>
 Raises the ItemDrag event.
 </summary>
	<param name="e">The TreeListViewItemDropEventArgs containing the data.</param>
	<remarks>
 This method will NOT fire if property AllowDefaultDragDrop=<c>FALSE</c>.  This is only a convenience method for the developer so 
 they don't have to handle the normal OnDragDrop event during drag operations.  Also, it will only fire if the user is 
 dragging nodes from within the control itself.  If you are expecting any outside dragging onto this control, you will have 
 to handle the normal OnDragDrop method.
 </remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
	<summary>
 Overriden.  Raises the WinControls.TreeListview.ContainerListView.KeyDown event.
 </summary>
	<param name="e">A KeyEventArgs containing the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnLeftRightKeys(System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handles the Left or Right arrow KeyPress of the control which either expand or collapse the current node.
 </summary>
	<param name="e">A KeyEventArg containing the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
	<summary>
 Overriden.  Raises the MouseDown event.
 </summary>
	<param name="e">A MouseEventArgs that contains the event data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnMouseLeave(System.EventArgs)">
	<summary>
 Overriden.  Raises the MouseLeave event.
 </summary>
	<param name="e">A System.EventArgs that contains the Data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
	<summary>
 Overriden.  Raises the MouseMove event.
 </summary>
	<param name="e">A MouseEventArg.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnNodesChanged(WinControls.ListView.EventArgClasses.TreeListViewEventArgs)">
	<summary>
 Occurs when a TreeListNode in the collection has been added, removed, or changed.
 </summary>
	<param name="e">a TreeListViewEventArg that contains the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnPageKeys(System.Windows.Forms.KeyEventArgs)">
	<summary>
 Overriden.  Occurs when the PageUp, PageDown, Home, or End Keys are pressed.
 </summary>
	<param name="e">A KeyEventArgs.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnProcessColumnMouseDownItems(System.Int32,System.Int32@,System.Int32)">
	<summary>
 Overriden.  Occurs on the MouseDown when the control is checking to see if a ColumnHeader was clicked.
 </summary>
	<param name="aColIndex">The Index of the ColumnHeader that is currently being checked/processed.</param>
	<param name="aTwid">A variable being used to check the width of the current subitem string.</param>
	<param name="aMwid">A variable being used to keep track of the largest aTwid (the largest string processed).</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
	<summary>
 Overriden.  Raises the System.Windows.Forms.Control.QueryContinueDrag event.
 </summary>
	<param name="qcdevent">A System.Windows.Forms.QueryContinueDragEventArgs that contains the event data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnResize(System.EventArgs)">
	<summary>
 Overriden.  Occurs when the control resizes.
 </summary>
	<param name="e">an EventArg.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnSetFocusedObject(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Overriden.  Sets focus to the selected TreeListNode.
 </summary>
	<param name="aClObj">The TreeListNode to set focus to.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnSort(System.Int32)">
	<summary>
 Overriden.  Occurs when the control needs to be sorted.
 </summary>
	<param name="aIndex">The zero-based index of the column to sort on.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnSpaceBarKey(System.Windows.Forms.KeyEventArgs)">
	<summary>
 Overriden.  Handles the SpaceBar key which Checks/UnChecks checkboxes on the selected TreeListNode(s).
 </summary>
	<param name="e">A KeyEventArgs.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.OnUpDownKeys(System.Windows.Forms.KeyEventArgs)">
	<summary>
 Occurs when the Up or Down Keys are pressed.
 </summary>
	<param name="e">A KeyEventArgs.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.PlusMinusClicked(System.Windows.Forms.MouseEventArgs,WinControls.ListView.TreeListNode@)">
	<summary>
 Determines if Plus or Minus was clicked.
 </summary>
	<param name="e">The MouseEventArg containing the data.</param>
	<param name="aNode">A Node (can be <c>NOTHING</c>) to assist in evaluation.</param>
	<returns><c>TRUE</c> if a Plus or Minus was clicked; otherwise <c>FALSE</c>.</returns>
	<remarks>aNode will be set to the Node the plus or minus was clicked on.</remarks>
</member><member name="M:WinControls.ListView.TreeListView.SelectAll">
	<summary>
 Overriden.  Selects all the Nodes in the control.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.TreeListViewAfterCollapse(WinControls.ListView.TreeListNode)">
	<summary>
 Calls the OnAfterCollapse method.
 </summary>
	<param name="aNode">The TreeListNode calling the method.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.TreeListViewAfterExpand(WinControls.ListView.TreeListNode)">
	<summary>
 Calls the OnAfterExpand method.
 </summary>
	<param name="aNode">The TreeListNode calling the method.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.TreeListViewBeforeCollapse(WinControls.ListView.TreeListNode)">
	<summary>
 Calls the OnBeforeCollapse method.
 </summary>
	<param name="aNode">The TreeListNode calling the method.</param>
	<returns><c>TRUE</c> if the call to the 'OnAfter' equivalent method should be cancelled; othewise <c>FALSE</c>.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListView.TreeListViewBeforeExpand(WinControls.ListView.TreeListNode)">
	<summary>
 Calls the OnBeforeExpand method.
 </summary>
	<param name="aNode">The TreeListNode calling the method.</param>
	<returns><c>TRUE</c> if the call to the 'OnAfter' equivalent method should be cancelled; othewise <c>FALSE</c>.</returns>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.TreeListView">
	<summary>
 TreeListView Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewItem.#ctor">
	<summary>
 Creates a New instance of ContainerListViewItem.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewItem.#ctor(System.String)">
	<summary>
 Creates a New instance of ContainerListViewItem.
 </summary>
	<param name="aItemText">The text to display for the item.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewItem.#ctor(System.String,System.Int32)">
	<summary>
 Creates a New instance of ContainerListViewItem.
 </summary>
	<param name="aItemText">The text to display for the item.</param>
	<param name="aImageIndex">The zero-based index of the image within the ImageList associated with the ContainerListView control that contains the item.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewItem.#ctor(System.String,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font)">
	<summary>
 Creates a New instance of ContainerListViewItem.
 </summary>
	<param name="aItemText">The text to display for the item.</param>
	<param name="aImageIndex">The zero-based index of the image within the ImageList associated with the ContainerListView control that contains the item.</param>
	<param name="aBackColor">The BackColor of the item.</param>
	<param name="aForeColor">The ForeColor of the item.</param>
	<param name="fontVal">The Font of the Item.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewItem.#ctor(System.String,System.Int32,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem[])">
	<summary>
 Creates a New instance of ContainerListViewItem.
 </summary>
	<param name="aItemText">The text to display for the item.</param>
	<param name="aImageIndex">The zero-based index of the image within the ImageList associated with the ContainerListView control that contains the item.</param>
	<param name="aBackColor">The BackColor of the item.</param>
	<param name="aForeColor">The ForeColor of the item.</param>
	<param name="fontVal">The Font of the Item.</param>
	<param name="aSubItems">An array of Child subitems to add to the newly created ContainerListViewItem.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewItem.HasParent">
	<summary>
 Overriden.  Determines if the current TreeListNode has a parent node.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewItem.Index">
	<summary>
 Overriden.  Gets the zero-based position of the ContainerListViewItem within the ContainerListViewItem collection.
 </summary>
	<value>
 The zero-based index of the item within the ListView control's ContainerListView.ContainerListViewItemCollection. If the item is not associated with a ContainerListView control, this property returns -1.
 </value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewItem.Selected">
	<summary>
 Overriden.  Gets or sets a value indicating whether the item is selected.
 </summary>
	<value><c>TRUE</c> if the item is selected; otherwise, <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewItem.StateImageIndex">
	<summary>
		<c>NOT SUPPORTED</c>. 
 Gets or sets the index of the state image (an image such as a checked or cleared check box that indicates the state of the item) that is displayed for the item.
 </summary>
	<value>The zero-based index of the state image in the ImageList that is displayed for the item.</value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewItem.Clone">
	<summary>
 Overriden.  Creates a new Object that is a copy of the current instance.
 </summary>
	<returns>An object that is a Clone of the current instance.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewItem.Parse(System.Xml.XmlNode)">
	<summary>
 Returns a ContainerListViewItem set with the property data in the XmlNode.
 </summary>
	<param name="aXmlNode">The XmlNode containing the property data.</param>
	<returns>
 A ContainerListViewItem set with the passed in property data; otherwise, a new ContainerListViewItem set with defaults.
 </returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewItem.Remove">
	<summary>
 Removes the current ContainerListViewItem from the ContainerListView control.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewItem.SetParent(WinControls.ListView.ContainerListView)">
	<summary>
 Assigns the ListView that the Item belongs to.
 </summary>
	<param name="aLView">The ContainerListView that owns the item.</param>
	<remarks>This code is for internal use only and is not intended to be called from your code.  Calling this method externally may have an adverse effect on code that uses this class.</remarks>
</member><member name="T:WinControls.ListView.ContainerListViewItem">
	<summary>
 ContainerListViewItem Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TypeConverters.ContainerColumnHeaderConverter.#ctor">
	<summary>
 Creates a New instance of ContainerColumnHeaderConverter.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TypeConverters.ContainerColumnHeaderConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
	<summary>
 Overloaded. Returns whether this converter can convert the object to the specified type.
 </summary>
	<param name="aContext">An ITypeDescriptorContext that provides a format aContext. </param>
	<param name="aDestType">A Type that represents the type you want to convert to.</param>
	<returns>true if this converter can perform the conversion; otherwise, false.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TypeConverters.ContainerColumnHeaderConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
	<summary>
 Overloaded. Converts the given aValue object to the specified type.
 </summary>
	<param name="aContext">An ITypeDescriptorContext that provides a format aContext. </param>
	<param name="aCulture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current aCulture is assumed. </param>
	<param name="aValue">The Object to convert. </param>
	<param name="aDestType">The Type to convert the aValue parameter to. </param>
	<returns>An Object that represents the converted aValue.</returns>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.TypeConverters.ContainerColumnHeaderConverter">
	<summary>
 ContainerColumnHeaderConverter Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TypeConverters.ContainerListViewItemConverter.#ctor">
	<summary>
 Creates a New instance of ContainerListViewItemConverter.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TypeConverters.ContainerListViewItemConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
	<summary>
 Overloaded. Returns whether this converter can convert the object to the specified type.
 </summary>
	<param name="aContext">An ITypeDescriptorContext that provides a format aContext. </param>
	<param name="aDestType">A Type that represents the type you want to convert to.</param>
	<returns>true if this converter can perform the conversion; otherwise, false.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TypeConverters.ContainerListViewItemConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
	<summary>
 Overloaded. Converts the given aValue object to the specified type.
 </summary>
	<param name="aContext">An ITypeDescriptorContext that provides a format aContext. </param>
	<param name="aCulture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current aCulture is assumed. </param>
	<param name="aValue">The Object to convert. </param>
	<param name="aDestType">The Type to convert the aValue parameter to. </param>
	<returns>An Object that represents the converted aValue.</returns>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.TypeConverters.ContainerListViewItemConverter">
	<summary>
 ContainerListViewItemConverter Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TypeConverters.ContainerListViewSubItemConverter.#ctor">
	<summary>
 Creates a New instance of ContainerListViewSubItemConverter.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TypeConverters.ContainerListViewSubItemConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
	<summary>
 Overloaded. Returns whether this converter can convert the object to the specified type.
 </summary>
	<param name="aContext">An ITypeDescriptorContext that provides a format aContext. </param>
	<param name="aDestType">A Type that represents the type you want to convert to.</param>
	<returns>true if this converter can perform the conversion; otherwise, false.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TypeConverters.ContainerListViewSubItemConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
	<summary>
 Overloaded. Converts the given aValue object to the specified type.
 </summary>
	<param name="aContext">An ITypeDescriptorContext that provides a format aContext. </param>
	<param name="aCulture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current aCulture is assumed. </param>
	<param name="aValue">The Object to convert. </param>
	<param name="aDestType">The Type to convert the aValue parameter to. </param>
	<returns>An Object that represents the converted aValue.</returns>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.TypeConverters.ContainerListViewSubItemConverter">
	<summary>
 ContainerListViewSubItemConverter Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TypeConverters.TreeListNodeConverter.#ctor">
	<summary>
 Creates a New instance of TreeListNodeConverter.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TypeConverters.TreeListNodeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
	<summary>
 Overloaded. Returns whether this converter can convert the object to the specified type.
 </summary>
	<param name="context">An ITypeDescriptorContext that provides a format context. </param>
	<param name="destinationType">A Type that represents the type you want to convert to.</param>
	<returns>true if this converter can perform the conversion; otherwise, false.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TypeConverters.TreeListNodeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
	<summary>
 Overloaded. Converts the given aValue object to the specified type.
 </summary>
	<param name="context">An ITypeDescriptorContext that provides a format context. </param>
	<param name="aCulture">A CultureInfo object. If a null reference (Nothing in Visual Basic) is passed, the current aCulture is assumed. </param>
	<param name="aValue">The Object to convert. </param>
	<param name="destinationType">The Type to convert the aValue parameter to. </param>
	<returns>An Object that represents the converted aValue.</returns>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.TypeConverters.TreeListNodeConverter">
	<summary>
 TreeListNodeConverter Class.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.None">
	<summary>
 No border.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.FixedSingle">
	<summary>
 A single line border.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.Fixed3D">
	<summary>
 A 3-Dimensional border.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.RoundedSmall">
	<summary>
 A small rounded border.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.RoundedMedium">
	<summary>
 A medium rounded border.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.Bump">
	<summary>
  A bumpy border.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.Etched">
	<summary>
 An etched border.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.Flat">
	<summary>
 A flat border.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.Raised">
	<summary>
 A raised Border.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.RaisedInner">
	<summary>
 A border whose inside edges appear raised.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.RaisedOuter">
	<summary>
 A border whose outside edges appear raised.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.Sunken">
	<summary>
 A sunken border.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.SunkenInner">
	<summary>
 A border whose inside edges appear sunken.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.SunkenOuter">
	<summary>
 A border whose outside edges appear sunken.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.Inset">
	<summary>
 A border on the inside of the control's edges.
 </summary>
</member><member name="F:WinControls.ListView.Enums.BorderStyleType.Outset">
	<summary>
 A border around the outside of the control.
 </summary>
</member><member name="T:WinControls.ListView.Enums.BorderStyleType">
	<summary>
  Enumerated values specifying possible BorderStyleType of a control or form.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.CheckBoxStyle.Flat">
	<summary>
 The Checkbox style has a flat, two-dimensional appearance.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.CheckBoxStyle.Normal">
	<summary>
 The CheckBox style has a three-dimensional appearance.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Enums.CheckBoxStyle">
	<summary>
 Enumerated values specifying the style of a CheckBox.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.CheckBoxType.CheckBox">
	<summary>
 A CheckBox is specified.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.CheckBoxType.RadioButton">
	<summary>
 A RadioButton is specified.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Enums.CheckBoxType">
	<summary>
 Enumerated values specifying the type of CheckBox to draw.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.CollectionActions.Nothing">
	<summary>
 Nothing has happened to an Item.  Default value.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.CollectionActions.Added">
	<summary>
 An Item has been Added.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.CollectionActions.Changed">
	<summary>
 An Item has changed.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.CollectionActions.Cleared">
	<summary>
 The collection has been cleared.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.CollectionActions.Clearing">
	<summary>
 The collection is about to be cleared (no items have been cleared yet).
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.CollectionActions.Removed">
	<summary>
 An Item has been removed.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Enums.CollectionActions">
	<summary>
 Enumerated values specifying Actions of a collection.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.DialogCodes.DLGC_WANTARROWS">
	<summary>
 The control wants arrow keys.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.DialogCodes.DLGC_WANTTAB">
	<summary>
 The control wants Tab keys.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.DialogCodes.DLGC_WANTALLKEYS">
	<summary>
 The control wants All keys.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.DialogCodes.DLGC_WANTMESSAGE">
	<summary>
 Pass the message to the Control.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.DialogCodes.DLGC_HASSETSEL">
	<summary>
 Understands the EM_SETSEL message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.DialogCodes.DLGC_DEFPUSHBUTTON">
	<summary>
 Default PushButton.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.DialogCodes.DLGC_UNDEFPUSHBUTTON">
	<summary>
 Non_Default PushButton.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.DialogCodes.DLGC_RADIOBUTTON">
	<summary>
 The Radio button.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.DialogCodes.DLGC_WANTCHARS">
	<summary>
 The control wants WM_CHAR messages.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.DialogCodes.DLGC_STATIC">
	<summary>
 Static item:  DON'T include.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.DialogCodes.DLGC_BUTTON">
	<summary>
 A Button item:  it CAN be checked.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Enums.DialogCodes">
	<summary>
 Enumerated values specifying possible DialogCodes (from the WinAPI).
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_GETDLGCODE">
	<summary>
 WM_GETDLGCODE message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_SETREDRAW">
	<summary>
 WM_SETREDRAW message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_CANCELMODE">
	<summary>
 WM_CANCELMODE message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_NOTIFY">
	<summary>
 WM_NOTIFY message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_KEYDOWN">
	<summary>
 WM_KEYDOWN message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_KEYUP">
	<summary>
 WM_KEYUP message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_CHAR">
	<summary>
 WM_CHAR message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_SYSKEYDOWN">
	<summary>
 WM_SYSKEYDOWN message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_SYSKEYUP">
	<summary>
 WM_SYSKEYUP message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_COMMAND">
	<summary>
 WM_COMMAND message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_MENUCHAR">
	<summary>
 WM_MENUCHAR message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_MOUSEMOVE">
	<summary>
 WM_MOUSEMOVE message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_LBUTTONDOWN">
	<summary>
 WM_LBUTTONDOWN message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_MOUSELAST">
	<summary>
 WM_MOUSELAST message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_USER">
	<summary>
 WM_USER message.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Enums.WinMsgs.WM_REFLECT">
	<summary>
 WM_REFLECT message.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Enums.WinMsgs">
	<summary>
  Enumerated values specifying possible Windows Messages.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Design.ContainerListViewDesigner.#ctor">
	<summary>
 Creates a New instance of ContainerListViewDesigner.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Design.ContainerListViewDesigner.Dispose(System.Boolean)">
	<summary>
 Overriden.  Releases the unmanaged resources used by the ComponentDesigner and optionally releases the managed resources.
 </summary>
	<param name="disposing"><c>TRUE</c> to release both managed and unmanaged resources; <c>FALSE</c> to release only unmanaged resources.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Design.ContainerListViewDesigner.AssociatedComponents">
	<summary>
 Overriden.  Gets the collection of components associated with the component managed by the designer.
 </summary>
	<value>The components that are associated with the component managed by the designer.</value>
	<remarks>
 This property indicates any components to copy or move along with the component managed by the designer during a copy, drag or move operation.  
 If this collection contains references to other components in the current design mode document, those components will be copied along with the component managed by the designer during a copy operation.  
 When the component managed by the designer is selected, this collection is filled with any nested controls. This collection can also include other components, such as the buttons of a toolbar.
 </remarks>
</member><member name="P:WinControls.ListView.Design.ContainerListViewDesigner.ColumnSortColorEnabled">
	<summary>
 Gets or Sets the shadowed ColumnSortColorEnabled property of the control being designed.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Design.ContainerListViewDesigner.ColumnTracking">
	<summary>
 Gets or Sets the shadowed ColumnTracking property of the control being designed.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Design.ContainerListViewDesigner.Control">
	<summary>
 Shadowed.  Gets the ContainerListView the designer is designing.
 </summary>
	<value>A ContainerListView" /&gt; control.</value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Design.ContainerListViewDesigner.GetHitTest(System.Drawing.Point)">
	<summary>
 Overriden.  Indicates whether a mouse click at the specified point should be handled by the control.
 </summary>
	<param name="point">A Point" /&gt; indicating the position at which the mouse was clicked, in screen coordinates. </param>
	<returns><c>TRUE</c> if a click at the specified point is to be handled by the control; otherwise, <c>FALSE</c>.</returns>
	<remarks>
 The GetHitTest method determines whether a click at the specified point should be passed to the control, while the control is in design mode. 
 You can override and implement this method to enable your control to receive clicks in the design-time environment.
 </remarks>
</member><member name="M:WinControls.ListView.Design.ContainerListViewDesigner.Initialize(System.ComponentModel.IComponent)">
	<summary>
 Overriden.  Initializes the designer with the specified component.
 </summary>
	<param name="component">The IComponent to associate the designer with. This component must always be an instance of, or derive from, Control.</param>
	<remarks>The IComponent to associate the designer with. This component must always be an instance of, or derive from, Control.</remarks>
</member><member name="M:WinControls.ListView.Design.ContainerListViewDesigner.OnPaintAdornments(System.Windows.Forms.PaintEventArgs)">
	<summary>
 Overriden.  Called when the control that the designer is managing has painted its surface so the designer can paint any additional adornments on top of the control.
 </summary>
	<param name="pe">A PaintEventArgs the designer can use to draw on the control.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Design.ContainerListViewDesigner.PreFilterProperties(System.Collections.IDictionary)">
	<summary>
 Overriden.  Adjusts the set of properties the component exposes through a TypeDescriptor.
 </summary>
	<param name="properties">An IDictionary containing the properties for the class of the component.</param>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Design.ContainerListViewDesigner">
	<summary>
 ContainerListViewDesigner Class.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Delegates.ContainerListViewEventHandler">
	<summary>
 Delegate that handles events on the ContainerListView control.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Delegates.ContainerListViewCancelEventHandler">
	<summary>
 Represents the method that will handle the BeforeCheck and BeforeSelect event of a ContainerListView.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Delegates.ContextMenuEventHandler">
	<summary>
 Handles events on the ContextMenu.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Delegates.HeaderMenuEventHandler">
	<summary>
 Common delegate that handles ColumnHeader events.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Delegates.ItemsChangedEventHandler">
	<summary>
 Common ItemsChanged delegate used by collections.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Delegates.TreeListViewCancelEventHandler">
	<summary>
 Represents the method that will handle the BeforeCheck, BeforeCollapse, BeforeExpand, or BeforeSelect event of a TreeView.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Delegates.TreeListViewEventHandler">
	<summary>
 Delegate that handles events on the TreeListView control.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Delegates.TreeListViewItemDragEventHandler">
	<summary>
 Represents the method that will handle the ItemDrag event of a TreeListView control.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Delegates.TreeListViewItemDropEventHandler">
	<summary>
 Represents the method that will handle the ItemDrag event of a TreeListView control.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Delegates.TreeListNodeLabelEditEventHandler">
	<summary>
 Represents the method that will handle the BeforeLabelEdit and AfterLabelEdit events of a TreeListView control.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.#ctor">
	<summary>
 Creates a New instance of ContainerListViewObject.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.#ctor(System.String)">
	<summary>
 Creates a New instance of ContainerListViewObject.
 </summary>
	<param name="aItemText">The text to display for the item.</param>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListViewObject._LstView">
	<summary>
 The ContainerListView that owns the ContainerListViewObject.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.Clone">
	<summary>
 Creates a new Object that is a copy of the current instance.
 </summary>
	<returns>An object that is a Clone of the current instance.</returns>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.HasParent">
	<summary>
 Gets a value that determines if the ContainerListViewObject has a parent.
 </summary>
	<value><c>TRUE</c> if the ContainerListViewObject" /&gt; has a parent; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.Index">
	<summary>
 Gets the zero-based position of the ContainerListViewObject within the collection.
 </summary>
	<value>
 The zero-based index of the item within Collection. If the item is not associated with a collection control, this property returns -1.
 </value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.Selected">
	<summary>
 Gets or Sets a value that determines if the ContainerListViewObject is in a selected state.
 </summary>
	<value><c>TRUE</c> if the ContainerListViewObject" /&gt; is selected; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.SetParent(WinControls.ListView.ContainerListView)">
	<summary>
 Assigns the ListView that the Item belongs to.
 </summary>
	<param name="aLView">The ContainerListView" /&gt; that owns the item.</param>
	<remarks>This code is for internal use only and is not intended to be called from your code.  Calling this method externally may have an adverse effect on code that uses this class.</remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.AllowSelection">
	<summary>
 Gets or Sets a value that Determines whether the ContainerListViewObject can be selected.
 </summary>
	<value><c>TRUE</c> if the ContainerListViewObject can be selected; otherwise <c>FALSE</c>.  Default is <c>TRUE</c>.</value>
	<remarks>
 In the case of TreeListNodes, AllowSelection is convenient if you want a user to be able to expand and collapse TreeListNodes 
 but not allow them to be selected (thereby not being added to the SelectedItems/SelectedIndexes collections).  For example, 
 if you have a parent node that represents a collection and the childnodes of that parentnode represent the items of that 
 collection, you can allow the user to select as many childnodes (or not) as they wish. So if there is processing on the 
 SelectedItems collection you can be guaranteed that the parentnode will not be part of that collection.
 AllowSelection may not hold such importance on ContainerListViewItems but it is supported if needed.
 </remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.BackColor">
	<summary>
 Gets or Sets the BackColor of the Item.
 </summary>
	<value>A System.Drawing.Color value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.Bounds">
	<summary>
 Gets the bounding rectangle of just the ContainerListViewObject.
 </summary>
	<value>A Rectangle representing the bounding rectangle; otherwise <c>NOTHING</c> if the Item is not associated to a ContainerListView.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.CheckBoxEnabled">
	<summary>
 Gets or Sets a value that determines if the checkbox is enabled or disabled.
 </summary>
	<value><c>TRUE</c> if the CheckBox is enabled; otherwise <c>FALSE</c>.  The default is <c>TRUE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.CheckBoxVisible">
	<summary>
 Gets or Sets a value that determines whether the CheckBox is visible for the ContainerListViewObject.
 </summary>
	<value><c>TRUE</c> if the CheckBox is visible for the ContainerListViewObject; otherwise <c>FALSE</c>.</value>
	<remarks>If CheckBoxes=<c>FALSE</c> on the ContainerListView then setting this property has no effect.</remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.Checked">
	<summary>
 Gets or sets a value indicating whether the item is checked.
 </summary>
	<value><c>TRUE</c> if the item is checked; otherwise, <c>FALSE</c>. The default is <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.CompleteBounds">
	<summary>
 Gets the bounding rectangle of the ContainerListViewObject, including it's SubItems.
 </summary>
	<value>A Rectangle representing the bounding rectangle of the ContainerListViewObject and all it's subitems; otherwise <c>NOTHING</c> if the Item is not associated to a ContainerListView.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.EditedSubItem">
	<summary>
 Gets the ContainerListViewSubItem being edited.
 </summary>
	<value>A ContainerListViewSubItem.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.Focused">
	<summary>
 Gets or sets a value indicating whether the item has focus within the list view control.
 </summary>
	<value><c>TRUE</c> if the item has focus; otherwise, <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.Font">
	<summary>
 Gets or sets the font of the text displayed by the item.
 </summary>
	<value>
 The Font to apply to the text displayed by the control. The default is the value of the DefaultFont property (from Control) if the ContainerListViewObject is not associated with a ContainerListView control; otherwise the font specified in the Font property for the ContainerListView control is used.
 </value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ForeColor">
	<summary>
 Gets or sets the foreground color of the item's text.
 </summary>
	<value>A Color that represents the foreground color of the item's text.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.HasDefaultBackColor">
	<summary>
 Gets a value that determines if the ContainerListViewObject's BackColor is the default.
 </summary>
	<value><c>TRUE</c> if the BackColor is the default value; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.HasDefaultFont">
	<summary>
 Gets a value that determines if the ContainerListViewObject's Font is the default.
 </summary>
	<value><c>TRUE</c> if the Font is the default value; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.HasDefaultForeColor">
	<summary>
 Gets a value that determines if the ContainerListViewObject's ForeColor is the default.
 </summary>
	<value><c>TRUE</c> if the ForeColor is the default value; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.Hovered">
	<summary>
 Gets or Sets that determines if the ContainerListViewObject is currently hovered by the Mouse pointer.
 </summary>
	<value><c>TRUE</c> if Hovered; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ImageIndex">
	<summary>
 Gets or sets the index of the image that is displayed for the item.
 </summary>
	<value>The zero-based index of the image in the ImageList that is displayed for the item. The default is -1.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ImageList">
	<summary>
 Gets the ImageList associated with the ContainerListViewObject.
 </summary>
	<value>An ImageList; otherwise <c>NOTHING</c> if the Item is not associated to a ContainerListView.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.IsEditing">
	<summary>
 Gets a value that determines if the ContainerListViewObject is currently being edited by the user.
 </summary>
	<value><c>TRUE</c> if the ContainerListViewItem is in an edit state; otherwise <c>FALSE</c>.</value>
	<remarks>This does not include any SubItems that may be in an editing state.</remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ListView">
	<summary>
 Gets the ContainerListView control that contains the item.
 </summary>
	<value>A ContainerListView that contains the ContainerListViewObject.</value>
	<remarks>You can use this property to access the ContainerListView control that owns the ContainerListViewObject.</remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.SubItems">
	<summary>
 Gets the SubItems of the current Item.
 </summary>
	<value>A ContainerListViewSubItem collection.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.Tag">
	<summary>
 Gets or sets an object that contains data to associate with the item.
 </summary>
	<value>An object that contains information that is associated with the item.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.Text">
	<summary>
 Gets or sets the text of the item.
 </summary>
	<value>The text to display for the item.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.TextAlign">
	<summary>
 Gets or Sets the Alignment of the text within the ContainerListViewObject.
 </summary>
	<value>A HorizontalAlignment enumeration.</value>
	<remarks>
 Note:  Setting this property on a TreeListNode has no effect on the TextAlignment of the text on the Node itself.  
 It will only be used for the Node's subitems instead.
 </remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.UseItemStyleForSubItems">
	<summary>
 Gets or sets a value indicating whether the TextAlign, Font, ForeColor, and BackColor properties for the item are used for all its subitems.
 </summary>
	<value>
		<c>TRUE</c> if all subitems use the textalign, font, foreground color, and background color settings of the item; 
 otherwise, <c>FALSE</c>. The default is <c>TRUE</c>.</value>
	<remarks>
 If you do not want to have a uniform background color, foreground color, textalign, and font used for all items and subitems 
 in your ContainerListView control, you can set this property to false. When this property is set to true, any changes made to 
 the subitem's ContainerListViewSubItem.Font, ContainerListViewSubItem.ForeColor, and ContainerListViewSubItem.BackColor,  
 ContainerListViewSubItem.TextAlign properties are ignored, and the values of the item are used instead. You can use this 
 property if you need to specify a different text alignment, text color, background color, or font to be used for a subitem to 
 highlight the item when subitems are displayed in the ContainerListView control.
 </remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.BeginEdit">
	<summary>
 Begins editing of the ContainerListViewObject.
 </summary>
	<remarks>Editing only occurs if the ContainerListViewObject belongs to a ContainerListView.</remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.BeginEdit(WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem)">
	<summary>
 Begins editing the specified SubItem.
 </summary>
	<param name="aSubItem">The SubItem to begin editing on.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.BeginEdit(System.Int32)">
	<summary>
 Begins editing the specified SubItem.
 </summary>
	<param name="aSubItemIndex">A Integer representing the index of the subitem to edit.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ChangeGlobalFont(System.Drawing.Font)">
	<summary>
 Notifies the class that it's Font is being changed by the base ContainerListView.
 </summary>
	<param name="fontVal">The Font to set.</param>
	<remarks>This code is not intended to be called directly from your code.  It is for internal use only.</remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ChangeGlobalForeColor(System.Drawing.Color)">
	<summary>
 Notifies the class that it's ForeColor is being changed by the base ContainerListView.
 </summary>
	<param name="aColor">The Color to set.</param>
	<remarks>This code is not intended to be called directly from your code.  It is for internal use only.</remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.EndEdit(System.Boolean)">
	<summary>
 Ends ALL editing on this ContainerListViewObject and any of it's subitems.
 </summary>
	<param name="aCancelChanges"><c>TRUE</c> to cancel any changes; otherwise <c>FALSE</c> to keep them.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.GetSubItemAt(System.Drawing.Point)">
	<summary>
 Returns a SubItem at the specified point.
 </summary>
	<param name="aPoint">The point at which to check for a SubItem.</param>
	<returns>A ContainerListViewSubItem ojbect.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.GetSubItemAt(System.Int32,System.Int32)">
	<summary>
 Returns a SubItem at the specified point.
 </summary>
	<param name="aX">The X coordinate.</param>
	<param name="aY">The Y coordinate.</param>
	<returns>A ContainerListViewSubItem ojbect.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.Parse(WinControls.ListView.ContainerListViewObject,System.Xml.XmlNode)">
	<summary>
 Sets the properties of a ContainerListViewObject with the data contained in the XmlNode.
 </summary>
	<param name="aObject">A ContainerListViewObject whose properties to set.</param>
	<param name="aXmlNode">The XmlNode containing the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.RefreshEditing">
	<summary>
 Refreshes the editing control if the ContainerListViewObject or any of it's subitems are in an edit state.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ToString">
	<summary>
 Overriden.  Returns a String that represents the current Object.
 </summary>
	<returns>A String that represents the current Object. </returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.#ctor">
	<summary>
 Creates a New instance of ContainerListViewSubItem.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.#ctor(System.String)">
	<summary>
 Creates a New instance of ContainerListViewSubItem.
 </summary>
	<param name="aText">The Text to assign.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.#ctor(System.Windows.Forms.Control)">
	<summary>
 Creates a New instance of ContainerListViewSubItem.
 </summary>
	<param name="aControl">The control to display in the SubItem.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font,System.Object)">
	<summary>
 Creates a New instance of ContainerListViewSubItem.
 </summary>
	<param name="aText">The text to display for the item.</param>
	<param name="aBackColor">The BackColor of the item.</param>
	<param name="aForeColor">The ForeColor of the item.</param>
	<param name="fontVal">The Font of the Item.</param>
	<param name="aTag">Data associated with the subitem.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.BackColor">
	<summary>
 Gets or Sets the BackColor of the SubItem.
 </summary>
	<value>A System.Color value.</value>
	<remarks>
 You can use the BackColor property to change the color displayed behind the subitem text. This property can be used if you want to use different background 
 and foreground color combinations (using the ForeColor property to set the foreground color) to differentiate one subitem from another. For example, you could 
 set the BackColor property to Color.Red to identify subitems that display a negative value.
 If the UseItemStyleForSubItems property of the ContainerListViewItem that owns the subitem is set to true, setting this property has no effect.
 </remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.Bounds">
	<summary>
 Gets the bounding rectangle of the ContainerListViewSubItem within it's Parent's bounding Rectangle.
 </summary>
	<value>A Rectangle representing the bounding rectangle; otherwise Rect.Empty if there is no parent.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.Font">
	<summary>
 Gets or sets the font of the text displayed by the subitem.
 </summary>
	<value>The Font to apply to the text displayed by the control.</value>
	<remarks>
 You can use this method to change the typeface styles applied to the text of the subitem. If the UseItemStyleForSubItems property of the ContainerListViewItem 
 is set to true, changing this property will have no effect. Because the Font is immutable (meaning that you cannot adjust any of its properties), you can only 
 assign the Font property a new Font. However, you can base the new font on the existing font.
 </remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.ForeColor">
	<summary>
 Gets or sets the foreground color of the subitem's text.
 </summary>
	<value>A Color that represents the foreground color of the subitem's text.</value>
	<remarks>
 You can use the ForeColor property to change the color of the subitem text. This property can be used if you want to use different background and foreground 
 color combinations (using the BackColor property to set the background color) to differentiate one item from another. For example, you could set the ForeColor 
 property to Color.Red to identify items that have a negative number associated with them.
 If the UseItemStyleForSubItems property of the ContainerListViewItem that owns the subitem is set to true, setting this property has no effect.
 </remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.Control">
	<summary>
 Gets or Sets the specifed control to the SubItem.
 </summary>
	<value>A Control.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.HasDefaultBackColor">
	<summary>
 Gets a value that determines if the ContainerListViewObject's BackColor is the default.
 </summary>
	<value><c>TRUE</c> if the BackColor is the default value; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.HasDefaultFont">
	<summary>
 Gets a value that determines if the ContainerListViewObject's Font is the default.
 </summary>
	<value><c>TRUE</c> if the Font is the default value; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.HasDefaultForeColor">
	<summary>
 Gets a value that determines if the ContainerListViewObject's ForeColor is the default.
 </summary>
	<value><c>TRUE</c> if the ForeColor is the default value; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.Index">
	<summary>
 Gets the zero-based position of the SubItem in the collection.
 </summary>
	<value>An Integer representing the Index.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.IsEditing">
	<summary>
 Gets a value that determines if the ContainerListViewSubItem is currently being edited by the user.
 </summary>
	<value><c>TRUE</c> if the SubItem is in an edit state; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.Parent">
	<summary>
 The owner of this SubItem.
 </summary>
	<value>A ContainerListViewObject that the SubItem belongs to.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.Tag">
	<summary>
 The Object to associate to the item.
 </summary>
	<value>An Object.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.Text">
	<summary>
 Gets or Sets the Text contained in the control.
 </summary>
	<value>A String.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.TextAlign">
	<summary>
 Gets or Sets the Alignment of the text within the ContainerListViewSubItem.
 </summary>
	<value>A HorizontalAlignment enumeration.</value>
	<remarks>
 You can use the TextAlign property to change the alignment of the subitem text. This property can be used if you want to use different alignments 
 to differentiate one subitem from another. If the UseItemStyleForSubItems property of the ContainerListViewItem that owns 
 the subitem is set to true, setting this property has no effect.
 </remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.ChangeGlobalFont(System.Drawing.Font)">
	<summary>
 Notifies the class that it's Font is being changed by the base ContainerListView.
 </summary>
	<param name="fontVal">The Font to set.</param>
	<remarks>This code is not intended to be called directly from your code.  It is for internal use only.</remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.ChangeGlobalForeColor(System.Drawing.Color)">
	<summary>
 Notifies the class that it's ForeColor is being changed by the base ContainerListView.
 </summary>
	<param name="aColor">The Color to set.</param>
	<remarks>This code is not intended to be called directly from your code.  It is for internal use only.</remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.Clone">
	<summary>
 Creates a new Object that is a copy of the current instance.
 </summary>
	<returns>An object that is a Clone of the current instance.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.Parse(System.Xml.XmlNode)">
	<summary>
 Returns a ContainerListViewSubItem set with the property data in the XmlNode.
 </summary>
	<param name="aXmlNode">The XmlNode containing the property data.</param>
	<returns>
 A ContainerListViewSubItem set with the passed in property data; otherwise, a new ContainerListViewSubItem set with defaults.
 </returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.Remove">
	<summary>
 Removes the current ContainerListViewSubItem from the ContainerListViewItem.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.SetParent(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Assigns the parent ContainerListViewItem to the SubItem.
 </summary>
	<param name="aParent">The ContainerListViewItem that the SubItem belongs to.</param>
	<remarks>This code is for internal use only and is not intended to be called from your code.  Calling this method externally may have an adverse effect on code that uses this class.</remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.SetParentOwner(WinControls.ListView.ContainerListView)">
	<summary>
 Sets the Parent ContainerListView.
 </summary>
	<param name="aClvw">A ContainerListView object.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem.ToString">
	<summary>
 Overriden.  Returns a string representing the object in the SubItem.
 </summary>
	<returns>A String object.</returns>
	<remarks>If the Control is nothing then the Text property is returned.  Otherwise, the string representation of the type of control displayed in the SubItem is returned.</remarks>
</member><member name="T:WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem">
	<summary>
 ContainerListViewSubItem Class.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.ContainerListViewObject">
	<summary>
 ContainerListViewObject Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.Tools.EvaluateObject(System.Windows.Forms.MouseEventArgs,System.Collections.IEnumerator,System.Collections.IEnumerator)">
	<summary>
 Determines if an object has been clicked.
 </summary>
	<param name="e">The MouseEventArg where the user clicked.</param>
	<param name="aKeysEnum">The Enumerator of the Keys in the HashTable to check.</param>
	<param name="aValsEnum">The Enumerator of the Values in the HashTable to check.</param>
	<returns>An Object if a match was found; otherwise <c>NOTHING</c>.</returns>
	<remarks>The HashTable must contain Rectangles as Keys!</remarks>
</member><member name="M:WinControls.ListView.Helpers.Tools.GetStringWidth(System.String,System.Drawing.Font)">
	<summary>
 Gets the Width of a string using a graphics object.
 </summary>
	<param name="aText">The Text to measure.</param>
	<param name="fontVal">The Font to measure the Text with.</param>
	<returns>An Integer representing the text width.</returns>
	<remarks>This function uses a default graphics object (from an Image object) to measure the Text.</remarks>
</member><member name="M:WinControls.ListView.Helpers.Tools.MeasureDisplayString(System.Drawing.Graphics,System.String,System.Drawing.Font)">
	<summary>
 Calculates the Size of the displayed String.
 </summary>
	<param name="aGraph">A Graphics object.</param>
	<param name="aText">The Text to measure.</param>
	<param name="fontVal">The Font to include for measuring.</param>
	<returns>A SizeF structure.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.Tools.TruncateString(System.String,System.Drawing.Font,System.Int32,System.Int32,System.Drawing.Graphics)">
	<summary>
 Truncates text.
 </summary>
	<param name="aText">The Text to truncate.</param>
	<param name="aWidth">The Width of the rectangle.</param>
	<param name="aOffSet">An Offset.</param>
	<param name="aGr">A Graphics object to perform the measurement.</param>
	<returns>A truncated string value.</returns>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Helpers.Tools">
	<summary>
 Static Tools Class.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.Helpers.VisualStyles.RECT.Empty">
	<summary>
 Represents an empty RECT structure.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.VisualStyles.RECT.#ctor(System.Drawing.Rectangle)">
	<summary>
 Creates a New instance of RECT.
 </summary>
	<param name="Rect">The Rectangle to initialize the structure with.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.VisualStyles.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
	<summary>
 Creates a New instance of RECT.
 </summary>
	<param name="aLeft">The x-coordinate of the left edge of the rectangle.</param>
	<param name="aTop">The y-coordinate of the top edge of the Rectangle</param>
	<param name="aRight">The x-coordinate of the right edge of the rectangle.</param>
	<param name="aBottom">The y-coordinate of the bottom edge of the Rectangle.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Helpers.VisualStyles.RECT.Bottom">
	<summary>
 Gets the y-coordinate of the bottom edge of the Rectangle
 </summary>
	<value>An Integer value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Helpers.VisualStyles.RECT.Top">
	<summary>
 Gets the y-coordinate of the top edge of the Rectangle
 </summary>
	<value>An Integer value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Helpers.VisualStyles.RECT.Left">
	<summary>
 Gets the x-coordinate of the left edge of the Rectangle
 </summary>
	<value>An Integer value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Helpers.VisualStyles.RECT.Right">
	<summary>
 Gets the x-coordinate of the right edge of the Rectangle
 </summary>
	<value>An Integer value.</value>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Helpers.VisualStyles.RECT">
	<summary>
 Structure RECT for VisualStyles.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.VisualStyles.CloseThemeData(System.IntPtr)">
	<summary>
 Closes the Theme handle.
 </summary>
	<param name="aTheme">The Theme handle to close.</param>
	<returns><c>TRUE</c> if the handle was closed successfully; otherwise <c>FALSE</c>.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.VisualStyles.DrawThemeBackground(System.IntPtr,System.IntPtr,System.Int32,System.Int32,WinControls.ListView.Helpers.VisualStyles.RECT@,WinControls.ListView.Helpers.VisualStyles.RECT@)">
	<summary>
	</summary>
	<param name="aTheme"></param>
	<param name="aHDC"></param>
	<param name="aPart"></param>
	<param name="aState"></param>
	<param name="Rect"></param>
	<param name="aClipRect"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.VisualStyles.DrawThemeEdge(System.IntPtr,System.IntPtr,System.Int32,System.Int32,WinControls.ListView.Helpers.VisualStyles.RECT@,System.Int32,System.Int32,WinControls.ListView.Helpers.VisualStyles.RECT@)">
	<summary>
	</summary>
	<param name="aTheme"></param>
	<param name="aHDC"></param>
	<param name="aPart"></param>
	<param name="aState"></param>
	<param name="aDestinatinRect"></param>
	<param name="aEdge"></param>
	<param name="aFlags"></param>
	<param name="aContentRect"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.VisualStyles.DrawThemeIcon(System.IntPtr,System.IntPtr,System.Int32,System.Int32,WinControls.ListView.Helpers.VisualStyles.RECT@,System.IntPtr,System.Int32)">
	<summary>
	</summary>
	<param name="aTheme"></param>
	<param name="aHDC"></param>
	<param name="aPart"></param>
	<param name="aState"></param>
	<param name="Rect"></param>
	<param name="aImageList"></param>
	<param name="aImageIndex"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.VisualStyles.DrawThemeParentBackground(System.IntPtr,System.IntPtr,WinControls.ListView.Helpers.VisualStyles.RECT@)">
	<summary>
	</summary>
	<param name="aTheme"></param>
	<param name="aHDC"></param>
	<param name="Rect"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.VisualStyles.DrawThemeText(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.String,System.Int32,System.UInt32,System.UInt32,WinControls.ListView.Helpers.VisualStyles.RECT@)">
	<summary>
	</summary>
	<param name="aTheme"></param>
	<param name="aHDC"></param>
	<param name="aPart"></param>
	<param name="aState"></param>
	<param name="aText"></param>
	<param name="aCharCount"></param>
	<param name="aTextFlags"></param>
	<param name="aTextFlags2"></param>
	<param name="Rect"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.VisualStyles.IsAppThemed">
	<summary>
 Determines if the current application is capable of running visual styles.
 </summary>
	<returns><c>TRUE</c> if the application can run visual styles; otherwise <c>FALSE</c>.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.VisualStyles.IsThemeActive">
	<summary>
 Determines if the current application's visual style is active.
 </summary>
	<returns><c>TRUE</c> if visual styles are active; otherwise <c>FALSE</c>.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.VisualStyles.OpenThemeData(System.IntPtr,System.String)">
	<summary>
 Opens the theme data.
 </summary>
	<param name="aHandle">The handle of the control/window to be themed.</param>
	<param name="aControlList"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.VisualStyles.SetWindowTheme(System.IntPtr,System.String,System.String)">
	<summary>
 ?
 </summary>
	<param name="aHandle"></param>
	<param name="aSubAppName"></param>
	<param name="aSubIDList"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Helpers.VisualStyles">
-----------------------------------------------------------------------------
 <summary>
 VisualStyles Class.
 </summary>
	<remarks></remarks>
-----------------------------------------------------------------------------

</member><member name="M:WinControls.ListView.Helpers.DragHelpers.#cctor">
	<summary>
 Creates a New instance of DragHelpers.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerColumnHeader.#ctor">
	<summary>
 Creates a New instance of ContainerColumnHeader.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerColumnHeader.#ctor(System.String)">
	<summary>
 Creates a New instance of ContainerColumnHeader.
 </summary>
	<param name="aText">A string to initialize the Text with.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerColumnHeader.#ctor(System.String,System.Int32)">
	<summary>
 Creates a New instance of ContainerColumnHeader.
 </summary>
	<param name="aText">A string to initialize the Text with.</param>
	<param name="aWidth">An Integer representing the Width.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerColumnHeader.#ctor(System.String,System.Int32,System.Windows.Forms.HorizontalAlignment)">
	<summary>
 Creates a New instance of ContainerColumnHeader.
 </summary>
	<param name="aText">A string to initialize the Text with.</param>
	<param name="aWidth">An Integer representing the Width.</param>
	<param name="aAlignment">An enumerated HorizontalAligment to initialize the Column with.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.AllowResize">
	<summary>
 Gets or Sets a value that determines whether the ColumnHeader can be resized.
 </summary>
	<value><c>TRUE</c> if the ColumnHeader can be resized; otherwise <c>FALSE</c>.  The default is <c>TRUE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.Bounds">
	<summary>
 Gets the bounding rectangle of the ContainerColumnHeader.
 </summary>
	<value>A Rectangle representing the bounding rectangle; otherwise <c>NOTHING</c> if the ContainerColumnHeader is not associated to a TreeListView.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.Font">
	<summary>
 Gets or sets the font of the text displayed by the ColumnHeader.
 </summary>
	<value>
 The Font to apply to the text displayed by the control.
 </value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.ForeColor">
	<summary>
 Gets or sets the foreground color of the subitem's text.
 </summary>
	<value>A Color that represents the foreground color of the subitem's text.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.Hidden">
	<summary>
 Gets or Sets a value that determines whether the Column is hidden or not.
 </summary>
	<value><c>TRUE</c> if the Column is hidden; otherwise <c>FALSE</c>.  Default is <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.Hovered">
	<summary>
 Gets or Sets a value that determines if the column is Hovered.
 </summary>
	<value><c>TRUE</c> if the column is hovered;  otherwise <c>FALSE</c>.  Default is <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.ImageIndex">
	<summary>
 Gets or sets the index of the image that is displayed for the item.
 </summary>
	<value>The zero-based index of the image in the ImageList that is displayed for the item. The default is -1.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.ImageList">
	<summary>
 Gets the ImageList associated with the ContainerColumnHeader.
 </summary>
	<value>An ImageList; otherwise <c>NOTHING</c> if the Column is not associated to a ContainerListView.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.Index">
	<summary>
 Gets the zero-based Index of the Column in the collection.
 </summary>
	<value>An Integer representing the Index.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.ListView">
	<summary>
 Gets the ListView this column belongs to.
 </summary>
	<value>A ContainerListView or <c>NOTHING</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.Pressed">
	<summary>
 Gets or Sets a value that determines if the Column is in a pressed state.
 </summary>
	<value><c>TRUE</c> if the column is pressed; otherwise <c>FALSE</c>.  Default is <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.SizingBounds">
	<summary>
 Gets the portion of the Column rectangle used for sizing.
 </summary>
	<value>A Rectangle object.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.Tag">
	<summary>
 Gets or sets an object that contains data to associate with the item.
 </summary>
	<value>An object that contains information that is associated with the item.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.Text">
	<summary>
 Gets or Sets the Title of the ColumnHeader.
 </summary>
	<value>A String value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.TextAlign">
	<summary>
 Gets or Sets the Alignment of the text within the ColumnHeaders.
 </summary>
	<value>A HorizontalAlignment enumeration.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerColumnHeader.Width">
	<summary>
 Gets or Sets the Width (in pixels) of the column.
 </summary>
	<value>An Integer representing the Width of the column.</value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerColumnHeader.Clone">
	<summary>
 Creates a new Object that is a copy of the current instance.
 </summary>
	<returns>An object that is a Clone of the current instance.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerColumnHeader.Remove">
	<summary>
 Removes the current ContainerColumnHeader from the ColumnHeader collection of the ListView control it belongs to.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerColumnHeader.Sort">
	<summary>
 Sort the Items in the ContainerListView by this column.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerColumnHeader.SetParent(WinControls.ListView.ContainerListView)">
	<summary>
 Assigns the ContainerListView that the Column belongs to.
 </summary>
	<param name="aCont">The ContainerListView that owns the item.</param>
	<remarks>This code is for internal use only and is not intended to be called from your code.  Calling this method externally may have an adverse effect on code that uses this class.</remarks>
</member><member name="M:WinControls.ListView.ContainerColumnHeader.ToString">
	<summary>
 Overriden.  Displays the Text of the column header.
 </summary>
	<returns>A String value.</returns>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.ContainerColumnHeader">
	<summary>
 ContainerColumnHeader Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.EventArgClasses.ContainerColumnHeaderEventArgs.#ctor(WinControls.ListView.ContainerColumnHeader,System.Windows.Forms.MouseEventArgs)">
	<summary>
 Creates a New instance of ContainerColumnHeaderEventArgs.
 </summary>
	<param name="aCol">The ContainerContainerColumnHeader to intialize the class with.</param>
	<param name="e">The MouseEventArgs to initialize the class with.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.ContainerColumnHeaderEventArgs.Column">
	<summary>
 Gets the Column that was clicked.
 </summary>
	<value>A ContainerColumnHeader object.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.ContainerColumnHeaderEventArgs.MouseArg">
	<summary>
 The MouseEventArg created when the Column was clicked.
 </summary>
	<value>A MouseEventArgs object.</value>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.EventArgClasses.ContainerColumnHeaderEventArgs">
	<summary>
 ContainerColumnHeaderEventArgs Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.EventArgClasses.ContainerListViewCancelEventArgs.#ctor(WinControls.ListView.ContainerListViewObject,System.Boolean)">
	<summary>
 Creates a New instance of ContainerListViewCancelEventArgs.
 </summary>
	<param name="aItem">The ContainerListViewObject that the event is responding to.</param>
	<param name="aCancel"><c>TRUE</c> to cancel the event; otherwise, <c>FALSE</c>.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.ContainerListViewCancelEventArgs.Cancel">
	<summary>
 Gets or sets a value indicating whether the event should be canceled.
 </summary>
	<value><c>TRUE</c> if the event should be canceled; otherwise, <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.ContainerListViewCancelEventArgs.Item">
	<summary>
 Gets the ContainerListViewObject that has been checked or selected.
 </summary>
	<value>The ContainerListViewObject that has been checked or selected.</value>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.EventArgClasses.ContainerListViewCancelEventArgs">
	<summary>
 ContainerListViewCancelEventArgs Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.EventArgClasses.ContainerListViewEventArgs.#ctor(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Initializes a new instance of the ContainerListViewEventArgs class.
 </summary>
	<param name="aItem">The ContainerListViewObject that the event is responding to.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.ContainerListViewEventArgs.Item">
	<summary>
 Gets the ContainerListViewObject that has been checked or selected.
 </summary>
	<value>The ContainerListViewObject that has been checked or selected.</value>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.EventArgClasses.ContainerListViewEventArgs">
	<summary>
 ContainerListViewEventArgs Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.EventArgClasses.ItemActionEventArgs.#ctor(System.Int32,WinControls.ListView.Enums.CollectionActions,System.Object,System.Object)">
	<summary>
 Creates a New instance of ItemActionEventArgs.
 </summary>
	<param name="aIndex">The Index of the Item that changed.</param>
	<param name="aAction">The Action the collection is performing.</param>
	<param name="aVal">The New value of the object the action is performed on.</param>
	<param name="aPrevVal">The Previous value of the object before it changed.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.ItemActionEventArgs.Action">
	<summary>
 Gets the Action performed on the Item.
 </summary>
	<value>An enumerated CollectionActions value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.ItemActionEventArgs.Index">
	<summary>
 Gets the Index of the Item that was changed.
 </summary>
	<value>An Integer representing the Index of the Item changed.</value>
	<remarks>If the Action type is CollectionActions.Clearing or CollectionActions.Cleared, the Index will be -1.</remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.ItemActionEventArgs.PreviousValue">
	<summary>
 Gets the Previous value of the Item.
 </summary>
	<value>An object.  This can be <c>NOTHING</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.ItemActionEventArgs.Value">
	<summary>
 Gets the Value of the Item.
 </summary>
	<value>An object.</value>
	<remarks>If the Action type is CollectionActions.Clearing or CollectionActions.Cleared, the Value will be an Ilist representing the items in the collection.</remarks>
</member><member name="T:WinControls.ListView.EventArgClasses.ItemActionEventArgs">
	<summary>
 ItemActionEventArgs Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.EventArgClasses.TreeListNodeLabelEditEventArgs.#ctor(WinControls.ListView.TreeListNode)">
	<summary>
 Creates a New instance of TreeListNodeEventArgs.
 </summary>
	<param name="aNode">The tree node containing the text to edit.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.EventArgClasses.TreeListNodeLabelEditEventArgs.#ctor(WinControls.ListView.TreeListNode,System.String)">
	<summary>
 Creates a New instance of TreeListNodeEventArgs.
 </summary>
	<param name="aNode">The tree node containing the text to edit.</param>
	<param name="aText">The new text to associate with the tree node.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.TreeListNodeLabelEditEventArgs.CancelEdit">
	<summary>
 Gets or sets a value indicating whether the edit has been canceled.
 </summary>
	<value><c>TRUE</c> if the edit has been canceled; otherwise, <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.TreeListNodeLabelEditEventArgs.Label">
	<summary>
 Gets the new text to associate with the tree node.
 </summary>
	<value>The string value that represents the TreeListNode label.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.TreeListNodeLabelEditEventArgs.Node">
	<summary>
 Gets the tree node containing the text to edit.
 </summary>
	<value>A TreeNode that represents the tree node containing the text to edit.</value>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.EventArgClasses.TreeListNodeLabelEditEventArgs">
	<summary>
 TreeListNodeEventArgs Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.EventArgClasses.TreeListViewCancelEventArgs.#ctor(WinControls.ListView.TreeListNode,System.Boolean,System.Windows.Forms.TreeViewAction)">
	<summary>
 Creates a New instance of TreeListViewCancelEventArgs.
 </summary>
	<param name="aNode">The TreeListNode that the event is responding to.</param>
	<param name="aCancel"><c>TRUE</c> to cancel the event; otherwise, <c>FALSE</c>.</param>
	<param name="aAction">The type of TreeViewAction that raised the event.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.TreeListViewCancelEventArgs.Action">
	<summary>
 Gets the type of action that raised the event.
 </summary>
	<value>The type of TreeViewAction that raised the event.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.TreeListViewCancelEventArgs.Item">
	<summary>
 Shadowed.  Gets the TreeListNode that has been checked, expanded, collapsed, or selected.
 </summary>
	<value>The TreeListNode that has been checked, expanded, collapsed, or selected.</value>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.EventArgClasses.TreeListViewCancelEventArgs">
	<summary>
 TreeListViewCancelEventArgs Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.EventArgClasses.TreeListViewItemDragEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Drawing.Point,WinControls.ListView.TreeListNode[],System.Boolean)">
	<summary>
 Creates a New instance of TreeListViewItemDropEventArgs
 </summary>
	<param name="aButton">An enumerated MouseButtons value.</param>
	<param name="aMousePos">The current position of the Mouse pointer in client coordinates.</param>
	<param name="aNodes">An array of nodes being dragged.</param>
	<param name="aCancel">Optional.  <c>TRUE</c> to cancel the event; otherwise <c>FALSE</c>.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.TreeListViewItemDragEventArgs.Cancel">
	<summary>
 Gets or Sets a value that determines if the event should be cancelled..
 </summary>
	<value><c>TRUE</c> to cancel the event; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.EventArgClasses.TreeListViewItemDragEventArgs">
	<summary>
 Class TreeListViewItemDragEventArgs.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.EventArgClasses.TreeListViewItemDropEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Drawing.Point,WinControls.ListView.TreeListNode[],WinControls.ListView.TreeListNode)">
	<summary>
 Creates a New instance of TreeListViewItemDropEventArgs
 </summary>
	<param name="aButton">An enumerated MouseButtons value.</param>
	<param name="aMousePos">The current position of the Mouse pointer in client coordinates.</param>
	<param name="aNodes">An array of nodes being dragged.</param>
	<param name="aTargetNode">The TreeListNode the data is being dropped on.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.TreeListViewItemDropEventArgs.TargetNode">
	<summary>
 Gets the target TreeListNode the data is being dropped on.
 </summary>
	<value>A TreeListNode object.</value>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.EventArgClasses.TreeListViewItemDropEventArgs">
	<summary>
 Class TreeListViewItemDropEventArgs.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.EventArgClasses.TreeListViewDragEventArgs.#ctor(System.Windows.Forms.MouseButtons,System.Drawing.Point,WinControls.ListView.TreeListNode[])">
	<summary>
 Creates a New instance of TreeListViewDragEventArgs
 </summary>
	<param name="aButton">An enumerated MouseButtons value.</param>
	<param name="aMousePos">The current position of the Mouse pointer in client coordinates.</param>
	<param name="aNodes">An array of nodes being dragged.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.TreeListViewDragEventArgs.Item">
	<summary>
 Shadowed.  Gets the TreeListNodes that are being dragged.
 </summary>
	<value>An array of TreeListNode that are being dragged.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.TreeListViewDragEventArgs.MousePosition">
	<summary>
 The current position of the mouse pointer in client coordinates.
 </summary>
	<value>A Point structure.</value>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.EventArgClasses.TreeListViewDragEventArgs">
	<summary>
 Class TreeListViewDragEventArgs.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.EventArgClasses.TreeListViewEventArgs.#ctor(WinControls.ListView.TreeListNode)">
	<summary>
 Initializes a new instance of the TreeListViewEventArgs class.
 </summary>
	<param name="aNode">The TreeListNode that the event is responding to.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.EventArgClasses.TreeListViewEventArgs.#ctor(WinControls.ListView.TreeListNode,System.Windows.Forms.TreeViewAction)">
	<summary>
 Initializes a new instance of the TreeListViewEventArgs class.
 </summary>
	<param name="aNode">The TreeListNode that the event is responding to.</param>
	<param name="aAction">The type of TreeViewAction that raised the event. </param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.TreeListViewEventArgs.Action">
	<summary>
 Gets the type of action that raised the event.
 </summary>
	<value>The type of TreeViewAction that raised the event.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.EventArgClasses.TreeListViewEventArgs.Item">
	<summary>
 Shadowed.  Gets the TreeListNode that has been checked, expanded, collapsed, or selected.
 </summary>
	<value>The TreeListNode that has been checked, expanded, collapsed, or selected.</value>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.EventArgClasses.TreeListViewEventArgs">
	<summary>
 TreeListViewEventArgs Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.#ctor">
	<summary>
 Creates a New Instance of ContainerListView.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.Dispose(System.Boolean)">
	<summary>Form overrides dispose to clean up the component list.
 </summary>
	<param name="disposing"><c>TRUE</c> if disposing; otherwise <c>FALSE</c>.</param>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListView._CheckBoxRects">
	<summary>
 The variable that represents the HashTable used to hold the Rectangles of the CheckBoxes.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListView._ColScaleMode">
	<summary>
 The variable that represents whether Column scaling is set.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListView._DefaultComparer">
	<summary>
 The variable that represents the default IComparer when sorting.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListView._LastColHovered">
	<summary>
 The variable that represents the last GridColumn that was hovered over by the mouse.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListView._LastPaintedSortCol">
	<summary>
 The variable that represents the last GridColumn that was selected and painted.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListView._MultiSelectMode">
	<summary>
 The variable that represents how, if enabled, a user is selecting multiple items.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListView._ProcessRows">
	<summary>
 Used by derived classes that override the OnMouseDown event.  This will prevent the base ContainerListView class from 
 processing any row clicks that the derived classes need to handle.
 </summary>
	<remarks>Yeah, I know, kind of a cheesy hack but my brain can't think of how to handle it differently right now.</remarks>
</member><member name="F:WinControls.ListView.ContainerListView._SelectedCol">
	<summary>
 The variable that represents the last selected GridColumn for sorting purposes.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListView.GridLineSelections.None">
	<summary>
 Do not show any gridlines.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListView.GridLineSelections.Both">
	<summary>
 Show both Column and Row gridlines.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListView.GridLineSelections.Column">
	<summary>
 Show only Column gridlines.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListView.GridLineSelections.Row">
	<summary>
 Show only Row gridlines.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.ContainerListView.GridLineSelections">
	<summary>
 Enumerated type specifying what GridLines to show.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListView.MultiSelectModes.Single">
	<summary>
 The control only allows Single row selection.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListView.MultiSelectModes.Range">
	<summary>
 A range of rows can be selected by holding down the Shift key, selecting an individual row (with mouse) and then
 selecting another row (with mouse).  The rows inbetween the two initially selected rows will also be selected.
 </summary>
	<remarks></remarks>
</member><member name="F:WinControls.ListView.ContainerListView.MultiSelectModes.Selective">
	<summary>
 Multiple rows can be selected by holding down the Ctrl key and selecting the desired rows with the mouse.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.ContainerListView.MultiSelectModes">
	<summary>
 Enumerated values specifying possible Selection modes.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.ContainerListView.AfterCheckStateChanged">
	<summary>
 Occurs after the state of the CheckBox changes on a ContainerListViewObject.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.ContainerListView.AfterEdit">
	<summary>
 Occurs after the ContainerListViewObject or one of it's SubItems has been edited by the user.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.ContainerListView.AfterSelect">
	<summary>
 Occurs after the ContainerListViewObject is selected.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.ContainerListView.BeforeCheckStateChanged">
	<summary>
 Occurs before the state of the CheckBox changes on a ContainerListViewObject.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.ContainerListView.BeforeEdit">
	<summary>
 Occurs when the user starts editing the label of a ContainerListViewObject or one of it's SubItems.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.ContainerListView.BeforeSelect">
	<summary>
 Occurs before the ContainerListViewObject is selected.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.ContainerListView.ColumnHeaderClicked">
	<summary>
 Occurs when a ColumnHeader is clicked. 
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.ContainerListView.ColumnHeaderContextMenuChanged">
	<summary>
 Occurs when the value of the ContextMenu property changes.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.ContainerListView.ColumnHeaderContextMenuRequested">
	<summary>
 Occurs right before the ContextMenu for the ContainerColumnHeaders is be displayed.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.ContainerListView.ContextMenuRequested">
	<summary>
 Occurs right before the ContextMenu for the control is displayed.
 </summary>
	<remarks></remarks>
</member><member name="E:WinControls.ListView.ContainerListView.ItemActivate">
	<summary>
 Occurs when an item is activated.
 </summary>
	<remarks>
 The ItemActivate event occurs when the user activates one or more items in the ContainerListView control. 
 The user can activate an item with either a single-click or double-click, or, depending on the value of the 
 ActivationType property, with the keyboard (Standard). From within the event handler for the ItemActivate event, 
 you can reference the SelectedItems or SelectedIndexes properties to access the collection of items selected in the ContainerListView to determine which items are being activated.
 </remarks>
</member><member name="P:WinControls.ListView.ContainerListView.ActivationType">
	<summary>
 Gets or Sets a value that specifies the action that activates an item.
 </summary>
	<value>A ItemActivation enumeration.  The default is ItemActivation.Standard</value>
	<remarks>
 The ActivationType property allows you to specify how the user will activate an item in the ContainerListView control. Activating an item in a ContainerListView 
 is different from simply selecting an item. When an item is selected, an action is typically performed in an event handler for the ItemActivate event. For example, 
 when an item is activated you might open a file or display a dialog box that allows the item to be edited. Typically, an item is double-clicked by the user to 
 activate it. If the Activation property is set to ItemActivation.OneClick, clicking the item once activates it. Setting the Activation property to 
 ItemActivation.TwoClick is different from the standard double-click because the two clicks can have any duration between them.  If the Activation property is set
 to ItemActivation.Standard, highlighting the Node and pressing Enter/Return will activate the item(s).  If AllowMultiSelectActivation property is set to <c>TRUE</c>, 
 the ItemActivate event will only fire if the ActivationType is set to ItemActivation.Standard.
 </remarks>
</member><member name="P:WinControls.ListView.ContainerListView.AllowColumnReOrder">
	<summary>
		<c>NOT SUPPORTED</c>. 
 Gets or Sets a value that specifies whether ColumnHeaders may be reordered.
 </summary>
	<value><c>TRUE</c> if reordering of columns is allowed; otherwise <c>FALSE</c>.  Default is <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.AllowColumnResize">
	<summary>
 Gets or Sets a value that determines whether Columns can be resized by the user.
 </summary>
	<value><c>TRUE</c> if a user is allowed to resize columns; otherwise <c>FALSE</c>.  The default is <c>TRUE</c>.</value>
	<remarks>This property enables/disables column resizing on all columns.  Individual columns can be enabled/disabled on the ColumnHeader itself.</remarks>
</member><member name="P:WinControls.ListView.ContainerListView.AllowHiddenColumns">
	<summary>
 Gets or Sets a value that determines if the control will Allow Columns to be Hidden.
 </summary>
	<value><c>TRUE</c> if the control will allow Columns to be hidden; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.AllowMultiSelectActivation">
	<summary>
 Gets or Sets a value that determines if the ItemActivation event fires if a user is in MultiSelect mode and presses the Enter/Return key.
 </summary>
	<value><c>TRUE</c> if ItemActivation fires on Enter/Return key while in MultiSelect mode;  otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.AlphaComponent">
	<summary>
 Gets or Sets the opacity of all the background, selection, tracking and sorting colors for the control and all items.  Valid values are between 0 and 255.
 </summary>
	<value>An Integer representing the alpha number used for opacity.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.BackColor">
	<summary>
 Overriden.  The background color used to display text and graphics in the control.
 </summary>
	<value>A Color value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.BorderStyle">
	<summary>
 Gets or Sets a value that specifies what style the Border the control has.
 </summary>
	<value>An enumerated Enums.BorderStyleType value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.CheckBoxes">
	<summary>
 Gets or Sets a value that determines if CheckBoxes will be displayed next to TreeListNodes in the TreeListView control.
 </summary>
	<value><c>TRUE</c> if checkboxes will be displayed next to TreeListNodes, otherwise <c>FALSE</c>.  The Default value is <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.CheckBoxSelection">
	<summary>
 Gets or Sets a value that determines how many clicks the user must press before the CheckBox will be selected/deselected.
 </summary>
	<value>An enumerated ItemActivation value.  Default is Standard (two-clicks).</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.CheckBoxStyle">
	<summary>
 Gets or Sets a value that determines the style of CheckBox if VisualStyles is NOT enabled.
 </summary>
	<value>An enumerated CheckBoxStyle value.  The Default is Flat.</value>
	<remarks>Setting this property has no effect if the VisualStyles property is set to <c>TRUE</c>.</remarks>
</member><member name="P:WinControls.ListView.ContainerListView.CheckBoxType">
	<summary>
 Gets or Sets the type of CheckBox to display.
 </summary>
	<value>An enumerated CheckBoxType value.  Default is CheckBox.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.CheckedItems">
	<summary>
 Gets the Items that are Checked in the control.
 </summary>
	<value>A CheckedContainerListViewItemCollection.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.ColumnHeaderContextMenuStrip">
	<summary>
 Gets or Sets the ContextMenuStrip displayed when a Header is right-clicked.
 </summary>
	<value>A ContextMenuStrip.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.ColumnHeaderStyles">
	<summary>
 Gets or Sets a value that specifies whether to show Column headers and whether they respond to Mouse clicks.
 </summary>
	<value>A ColumnHeaderStyle enumeration.</value>
	<remarks>
 Setting this property to ColumnHeaderStyles.NonClickable or ColumnHeaderStyles.None will set the ColumnSortColorEnabled 
 property to <c>FALSE</c>.
 </remarks>
</member><member name="P:WinControls.ListView.ContainerListView.Columns">
	<summary>
 Gets the Columns of the control.
 </summary>
	<value>a ContainerColumnHeaderCollection.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.ColumnSortColor">
	<summary>
 Gets or Sets a value that specifies the Color used for the currently selected sorting column.
 </summary>
	<value>A System.Color.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.ColumnSortColorEnabled">
	<summary>
 Gets or Sets a value that specifies whether to enable drawing the selected Column the ColumnSortColor.
 </summary>
	<value><c>TRUE</c> if the selected Column will be painted the ColumnSortColor; otherwise <c>FALSE</c>.  The default is <c>FALSE</c>.</value>
	<remarks>Setting this property is only effective if the ColumnHeaderStyles property is set to ColumnHeaderStyle.Clickable.</remarks>
</member><member name="P:WinControls.ListView.ContainerListView.ColumnTracking">
	<summary>
 Gets or Sets a value that highlights the Column when the Mouse hovers of the header.
 </summary>
	<value><c>TRUE</c> if tracking is enabled;  otherwise <c>FALSE</c>.  Default is <c>TRUE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.ColumnTrackingColor">
	<summary>
 Gets or Sets the Color used for column hot-tracking
 </summary>
	<value>A System.Color used for hot-tracking.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.ContextMenu">
	<summary>
 Overriden.  Gets or Sets the ContextMenu displayed when the control is right-clicked.
 </summary>
	<value>A ContextMenu.</value>
	<remarks>
 While Microsoft has the ContextMenu available for backwards compatibility, this control does not support it so please use the ContextMenuStrip 
 instead.
 </remarks>
</member><member name="P:WinControls.ListView.ContainerListView.DefaultComparer">
	<summary>
 Gets the default IComparer to use when sorting ContainerListsViewObjects.
 </summary>
	<value>An object that implements the IComparer interface.</value>
	<remarks>This Comparer will be used if the 'SortComparer' property is <c>NOTHING</c>.</remarks>
</member><member name="P:WinControls.ListView.ContainerListView.DisabledColor">
	<summary>
 Gets or Sets a value that determines the Color of the control when the Enabled property is False.
 </summary>
	<value>A Color.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.EditBackColor">
	<summary>
 Gets or sets the background color of the ContainerListViewObject when it is in an edit state.
 </summary>
	<value>A Color value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.EditedObject">
	<summary>
 Gets the current ContainerListViewObject that is itself being edited or has one of it's subitems being edited.
 </summary>
	<value>A ContainerListViewObject.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.EnsureVisible">
	<summary>
 Gets or Sets a value that specifies wether the selected item is always visible
 </summary>
	<value><c>TRUE</c> if the selected Item is always visible;  otherwise FALSe.  Default is <c>TRUE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.Font">
	<summary>
 Overriden.  Gets or Sets the Font used to display text in the control.
 </summary>
	<value>A Font value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.ForeColor">
	<summary>
 Overriden.  Gets or Sets the foreground color used to display text and graphics in the control.
 </summary>
	<value>A Color value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.FullRowSelect">
	<summary>
 Gets or Sets a value that determines whether to highlight the full row or just the label when selecting an item.
 </summary>
	<value><c>TRUE</c> if FullRow selecting is enabled;  otherwise <c>FALSE</c>.  Default is <c>TRUE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.GridLineColor">
	<summary>
 Gets or Sets the Color used for Gridlines.
 </summary>
	<value>A Color.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.GridLinePen">
	<summary>
 Gets the Pen used to draw GridLines.
 </summary>
	<value>A Pen object.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.GridLines">
	<summary>
 Gets or Sets a value that determines which gridlines will be shown.
 </summary>
	<value>An enumerated type specifying which gridlines are shown on the control.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.HeaderBuffer">
	<summary>
 Gets the size of the Header buffer for drawing purposes.
 </summary>
	<value>An Integer.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.HiddenColumns">
	<summary>
 Gets the Columns that are Hidden in the control.
 </summary>
	<value>A HiddenColumnsCollection.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.HideSelection">
	<summary>
 Gets or Sets a value that determines whether to hide selected rows when the control loses focus.
 </summary>
	<value><c>TRUE</c> if selected rows are hidden upon losing focus; otherwise <c>FALSE</c>.  Default is <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.HScroll">
	<summary>
 Gets the Horizontal scroll bar used by the control.
 </summary>
	<value>An HScrollBar object.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.HoverSelection">
	<summary>
		<c>NOT SUPPORTED</c>. 
 Gets or Sets a value that determines whether to automatically select a row when the mouse is hovered over it for a short time.
 </summary>
	<value><c>TRUE</c> if hovering is enabled;  otherwise <c>FALSE</c>. Default is <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.ImageList">
	<summary>
 Gets or Sets the ImageList used for displaying Images in the control.
 </summary>
	<value>An ImageList object.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.InUpdateMode">
	<summary>
 Gets a value that determines if the control is currently being updated.
 </summary>
	<value><c>TRUE</c> if the control is in Update mode; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.IsFocused">
	<summary>
 Gets a value that specifies if the control has focus.
 </summary>
	<value><c>TRUE</c> if the control has focus; otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.Items">
	<summary>
 Gets the Items contained in the control.
 </summary>
	<value>A ContainerListViewItemCollection.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.Logging">
	<summary>
 Gets or sets a value that determines whether logging is enabled or disabled on the control.
 </summary>
	<value><c>TRUE</c> if logging is enabled; otherwise, <c>FALSE</c>.  Default is <c>FALSE</c>.</value>
	<returns><c>TRUE</c> if logging is enabled; otherwise, <c>FALSE</c>.  Default is <c>FALSE</c>.</returns>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.MultiSelect">
	<summary>
 Gets or Sets a value that determines whether the control will allow multiple selections.
 </summary>
	<value><c>TRUE</c> if multiple selection is enabled; otherwise <c>FALSE</c>.  Default is <c>FALSE</c>.</value>
	<remarks>
 If MultiSelect is changed to <c>FALSE</c> and multiple items are currently selected, then all selected items are 
 cleared except for the last item that was selected when MultiSelect was enabled.
 </remarks>
</member><member name="P:WinControls.ListView.ContainerListView.ResizeCursor">
	<summary>
 Gets or Sets the Cursor to display when a ColumnHeader is being resized.
 </summary>
	<value>A Cursor.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.RightMouseSelects">
	<summary>
 Gets or Sets a value that determines if a Right mouse-click selects a ContainerListViewObject also.
 </summary>
	<value><c>TRUE</c> if a right mouse-click selects a ContainerListViewObject; otherwise <c>FALSE</c>.  The Default is <c>TRUE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.RowHeight">
	<summary>
 Gets or Sets the RowHeight of the Items in the listview.
 </summary>
	<value>An Integer representing the row height.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.RowSelectColor">
	<summary>
 Gets or Sets a value that specifies the color used for selected rows.
 </summary>
	<value>A System.Drawing.Color value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.RowsRectangle">
	<summary>
 Gets the current rectangle representing the area where the visible Rows are located.
 </summary>
	<value>A Rectangle representing the visible Rows rectangle.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.RowTracking">
	<summary>
 Gets or Sets a value that determines if the control Highlights a row when the Mouse hovers over it.
 </summary>
	<value><c>TRUE</c> if enabled; otherwise <c>FALSE</c>.  Default is <c>TRUE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.RowTrackingColor">
	<summary>
 Gets or Sets a value that specifies the Color used for row hot-tracking.
 </summary>
	<value>A Color.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.Scrollable">
	<summary>
 Indicates whether the control will display scroll bars if it contains more items than can fit in the client area.
 </summary>
	<value><c>TRUE</c> if scroll bars are visible;  othewise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.SelectedIndexes">
	<summary>
 Gets the indexes of the Selected items in the control.
 </summary>
	<value>A collection of selected Indices</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.SelectedItems">
	<summary>
 Gets the Items that are selected in the control.
 </summary>
	<value>A SelectedContainerListViewItemCollection.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.SortComparer">
	<summary>
 Gets or Sets the sorting comparer for the control.
 </summary>
	<value>An IComparer that represents the sorting comparer for the control.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.Sorting">
	<summary>
 Indicates the manner in which items are to be sorted.
 </summary>
	<value>A SortOrder enumeration indicating how items are sorted.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.Text">
	<summary>
 Overriden.  Gets or Sets the Text associated with the Control.
 </summary>
	<value>A String value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.TrackHistory">
	<summary>
		<c>NOT SUPPORTED</c>. 
 Gets or Sets a value that determines if the control should keep track of user-selected Items.
 </summary>
	<value><c>TRUE</c> if the control should track the history of user-selected items;  otherwise <c>FALSE</c> if not.  The default is <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.VisualStyles">
	<summary>
 Gets or Sets a value that indicates whether the control should be drawn using WindowsXP visual styles.
 </summary>
	<value><c>TRUE</c> if WindowsXP visual styles are applied;  othewise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.ContainerListView.VScroll">
	<summary>
 Gets the Vertical scroll bar used by the control.
 </summary>
	<value>A VScrollBar object.</value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.BeginUpdate">
	<summary>
 Prevents the control from drawing until the EndUpdate method is called.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.CheckBoxClicked(System.Collections.Hashtable,System.Windows.Forms.MouseEventArgs,System.Object@)">
	<summary>
 Determines if a CheckBox has been clicked on an Object.
 </summary>
	<param name="aHashTableToCheck">The HashTable containing the Rectangles(Keys) associated to the Objects(Values).</param>
	<param name="e">The MouseEventArg where the user clicked.</param>
	<param name="aObject">The Object to set if a match was found in the HashTable.</param>
	<returns><c>TRUE</c> if a match was found; otherwise <c>FALSE</c>.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.ContainerListViewAfterEdit(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Calls the OnAfterEdit method.
 </summary>
	<param name="aItem">The ContainerListViewObject calling the method.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.ContainerListViewAfterSelect(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Calls the OnAfterSelect method.
 </summary>
	<param name="aItem">The ContainerListViewItem calling the method.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.ContainerListViewBeforeEdit(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Calls the OnBeforeEdit method.
 </summary>
	<param name="aItem">The ContainerListViewObject calling the method.</param>
	<returns><c>TRUE</c> if the call to the 'OnAfter' equivalent method should be cancelled; othewise <c>FALSE</c>.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.ContainerListViewBeforeSelect(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Calls the OnBeforeSelect method.
 </summary>
	<param name="aItem">The ContainerListViewItem calling the method.</param>
	<returns><c>TRUE</c> if the call to the 'OnAfter' equivalent method should be cancelled; othewise <c>FALSE</c>.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.ContainerListViewAfterCheckStateChanged(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Calls the OnAfterCheckStateChanged method.
 </summary>
	<param name="aItem">The ContainerListViewObject calling the method.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.ContainerListViewBeforeCheckStateChanged(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Calls the OnBeforeCheckStateChanged method.
 </summary>
	<param name="aItem">The ContainerListViewObject calling the method.</param>
	<returns><c>TRUE</c> if the call to the 'OnAfterCheckStateChanged' equivalent method should be cancelled; othewise <c>FALSE</c>.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.CreateSchema(System.Xml.Schema.XmlSchemaSet)">
	<summary>
 Creates the Schema for the class.
 </summary>
	<param name="aSchemaSet"></param>
	<returns></returns>
	<remarks>
 See the <see cref="T:System.Xml.Serialization.IXmlSerializable"/> interface and the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute"/> for more details.
 <para>
 This method is intentionally hidden from view and only used by xml serializers.
 </para>
	</remarks>
</member><member name="M:WinControls.ListView.ContainerListView.DetermineBackGroundColor(WinControls.ListView.ContainerListViewObject,WinControls.ListView.ContainerListViewObject.ContainerListViewSubItem)">
	<summary>
 Determines the background color of the <see cref="T:WinControls.ListView.ContainerListViewObject"/>.
 </summary>
	<param name="aObj">The object whose background color to determine.</param>
	<param name="aSubItem">Optional.  A SubItem.</param>
	<returns>A Color based on the state of aObj.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.DrawObjectCheckBox(System.Drawing.Graphics,System.Drawing.Rectangle,WinControls.ListView.ContainerListViewObject)">
	<summary>
 Draws the CheckBoxes (if visible) of any ContainerListViewObject.
 </summary>
	<param name="aGr">The Graphics object used to paint the CheckBox.</param>
	<param name="Rect">The Rectangle representing the area to paint the CheckBox in.</param>
	<param name="aObj">The ContainerListViewObject whose CheckBox is to be drawn.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.EndUpdate">
	<summary>
 Resumes drawing of the list view control after drawing is suspended by the BeginUpdate method.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.EnsureVerticalScroll(System.Int32,System.Boolean)">
	<summary>
 Ensures that the VSCroll's 'LargeChange' property is always divisible by the RowHeight.
 </summary>
	<param name="aCurrentValue">The current value of the VSCroll.</param>
	<param name="aIsHScrollVisible"><c>TRUE</c> if the HScroll is also visible; otherwise <c>FALSE</c>.</param>
	<returns>An Integer representing the new LargeChange value.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.GetItemBounds(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Returns the bounding Rectangle of the ContainerListViewObject only.
 </summary>
	<param name="aObj">The ContainerListViewObject whose rectangle to return.</param>
	<returns>A Rectangle.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.GetCompleteItemBounds(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Returns the bounding Rectangle of the ContainerListViewObject and it's SubItems.
 </summary>
	<param name="aObj">The ContainerListViewObject whose rectangle to return.</param>
	<returns>A Rectangle.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.GetItemAt(System.Drawing.Point)">
	<summary>
 Returns a ContainerListViewObject at the specified point.
 </summary>
	<param name="aPoint">The point at which to check for a SubItem.</param>
	<returns>A ContainerListViewObject ojbect.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.GetItemAt(System.Int32,System.Int32)">
	<summary>
 Returns a ContainerListViewObject at the specified point.
 </summary>
	<param name="aX">The X coordinate.</param>
	<param name="aY">The Y coordinate.</param>
	<returns>A ContainerListViewObject ojbect.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.GetSchema">
	<summary>
 Reserved.
 This function is reserved.  Apply the XmlSchemaProviderAttribute to the class instead
 </summary>
	<returns> An <c>XmlSchema</c> that describes the XML representation of the object that is produced by the IXmlSerializable.WriteXmlmethod 
 and consumed by the IXmlSerializable.ReadXml method.</returns>
	<remarks>
 See the IXmlSerializable interface for more information.
 </remarks>
</member><member name="M:WinControls.ListView.ContainerListView.GetSumOfAllColumnWidths">
	<summary>
 Returns the Sum of all the Column widths in the control, including hidden columns.
 </summary>
	<returns>An Integer representing the combined width of all the columns.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.GetSumOfVisibleColumnWidths">
	<summary>
 Returns the Sum of all the visible Column widths in the control.
 </summary>
	<returns>An Integer representing the combined width of all the visible columns.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.HeaderResized">
	<summary>
 Notifies the control that one of it's ContainerColumnHeaders has been resized.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnAdjustScrollBars">
	<summary>
 Occurs when the ScrollBars need to be setup and displayed by the control.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnAfterCheckStateChanged(WinControls.ListView.EventArgClasses.ContainerListViewEventArgs)">
	<summary>
 Raises the AfterCheckStateChanged event.
 </summary>
	<param name="e">A ContainerListViewEventArg that contains the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnAfterEdit(WinControls.ListView.EventArgClasses.ContainerListViewEventArgs)">
	<summary>
 Raises the AfterEdit event.
 </summary>
	<param name="e">A ContainerListViewEventArgs containing the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnAfterSelect(WinControls.ListView.EventArgClasses.ContainerListViewEventArgs)">
	<summary>
 Raises the AfterSelect event.
 </summary>
	<param name="e">A ContainerListViewEventArg that contains the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnBeforeEdit(WinControls.ListView.EventArgClasses.ContainerListViewCancelEventArgs)">
	<summary>
 Raises the BeforeEdit event.
 </summary>
	<param name="e">The ContainerListViewCancelEventArgs containing the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnBeforeSelect(WinControls.ListView.EventArgClasses.ContainerListViewCancelEventArgs)">
	<summary>
 Raises the BeforeSelect event.
 </summary>
	<param name="e">A ContainerListViewCancelEventArg that contains the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnCheckShiftState(System.Windows.Forms.KeyEventArgs)">
	<summary>
 Occurs whenever OnKeyDown is called.  Checks if any Shift or Control keys are also pressed.
 </summary>
	<param name="e">A KeyEventArgs.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnBeforeCheckStateChanged(WinControls.ListView.EventArgClasses.ContainerListViewCancelEventArgs)">
	<summary>
 Raises the BeforeCheckStateChanged event.
 </summary>
	<param name="e">A ContainerListViewCancelEventArg that contains the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnColumnHeaderClicked(WinControls.ListView.EventArgClasses.ContainerColumnHeaderEventArgs)">
	<summary>
 Raises the ColumnHeaderClicked event.
 </summary>
	<param name="e">A MouseEventArg.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnColumnHeaderContextMenuChanged(System.EventArgs)">
	<summary>
 Raises the ColumnHeaderContextMenuChanged event.
 </summary>
	<param name="e">The EventArg containing the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnColumnHeaderContextMenuRequested(System.Windows.Forms.MouseEventArgs)">
	<summary>
 Raises the ColumnHeaderContextMenuRequested event.
 </summary>
	<param name="e">The MouseArg where the ColumnHeaderContextMenu should be displayed.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnContextMenuRequested(System.Windows.Forms.MouseEventArgs)">
	<summary>
 Raises the ContextMenuRequested event.
 </summary>
	<param name="e">The MouseArg where the ContextMenu should be displayed.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnDrawBackGround(System.Drawing.Graphics,System.Drawing.Rectangle)">
	<summary>
 Draws the BackGround of the control.
 </summary>
	<param name="aGr">A Graphics object to draw with.</param>
	<param name="Rect">A Rectangle to draw in.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnDrawColumnGridLines(System.Drawing.Graphics)">
	<summary>
 Draws the Column GridLines of the control.
 </summary>
	<param name="aGr">A Graphics object to draw with.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnDrawRows(System.Drawing.Graphics,System.Drawing.Rectangle)">
	<summary>
 Draws the Rows of the control.
 </summary>
	<param name="aGr">A Graphics object to draw with.</param>
	<param name="Rect">A Rectangle to draw in.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnGotFocus(System.EventArgs)">
	<summary>
 Raises the GotFocus event.
 </summary>
	<param name="e">An EventArg.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnItemActivate(System.EventArgs)">
	<summary>
 Raises the ItemActivate event.
 </summary>
	<param name="e">An EventArg.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
	<summary>
 Overriden.  Raises the WinControls.TreeListview.ContainerListView.KeyDown event.
 </summary>
	<param name="e">A KeyEventArgs containing the data.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
	<summary>
 Overriden.  Raises the KeyUp event
 </summary>
	<param name="e">A KeyEventArg.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnLostFocus(System.EventArgs)">
	<summary>
 Overriden.  Raises the LostFocus event.
 </summary>
	<param name="e">An EventArg.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
	<summary>
 Overriden.  Raises the MouseDown event.
 </summary>
	<param name="e">A MouseEventArg.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
	<summary>
 Raises the MouseMove event.
 </summary>
	<param name="e">A MouseEventArg.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
	<summary>
 Raises the MouseUp event.
 </summary>
	<param name="e">A MouseEventArg.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
	<summary>
 Raises the MouseWheel event.
 </summary>
	<param name="e">A MouseEventArg.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnPaint(System.Windows.Forms.PaintEventArgs)">
	<summary>
 Overriden.  Paints the control.
 </summary>
	<param name="e">A PaintEventArg to pass.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnPageKeys(System.Windows.Forms.KeyEventArgs)">
	<summary>
 Occurs when the PageUp, PageDown, Home, or End Keys are pressed.
 </summary>
	<param name="e">A KeyEventArgs.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnProcessColumnMouseDownItems(System.Int32,System.Int32@,System.Int32)">
	<summary>
 Occurs on the MouseDown when the control is checking to see if a ColumnHeader was clicked.
 </summary>
	<param name="aColIndex">The Index of the ColumnHeader that is currently being checked/processed.</param>
	<param name="aTwid">A variable being used to check the width of the current subitem string.</param>
	<param name="aMwid">A variable being used to keep track of the largest aTwid (the largest string processed).</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnResize(System.EventArgs)">
	<summary>
 Raises the Resize event.
 </summary>
	<param name="e">an EventArg.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnScroll(System.Object,System.EventArgs)">
	<summary>
 Occurs when the ScrollBars are scrolled.
 </summary>
	<param name="Sender">The object that raised the event.</param>
	<param name="e">An EventArg.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnSetFocusedObject(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Sets focus to the specified object.
 </summary>
	<param name="aClObj">The ContainerListViewObject to set focus to.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnSort(System.Int32)">
	<summary>
 Occurs when the control needs to be sorted.
 </summary>
	<param name="aIndex">The zero-based index of the column to sort on.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnSpaceBarKey(System.Windows.Forms.KeyEventArgs)">
	<summary>
 Handles the SpaceBar key which Checks/UnChecks checkboxes on the Item.
 </summary>
	<param name="e">A KeyEventArgs.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.OnUpDownKeys(System.Windows.Forms.KeyEventArgs)">
	<summary>
 Occurs when the Up or Down Keys are pressed.
 </summary>
	<param name="e">A KeyEventArgs.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.ProcessDesignModeColumnClick(System.Windows.Forms.MouseEventArgs)">
	<summary>
 Processes Column clicks if the control is in DesignMode.
 </summary>
	<param name="e">The MouseArg containing the data.</param>
	<remarks>Calling this method will allow for design-time support of the control's columns.</remarks>
</member><member name="M:WinControls.ListView.ContainerListView.ReadXml(System.Xml.XmlReader)">
	<summary>
 Generates an object from its XML representation. 
 </summary>
	<param name="aReader">The XmlReader stream from which the object is deserialized.</param>
	<remarks>
 See the <see cref="T:System.Xml.Serialization.IXmlSerializable"/> interface for more details.
 </remarks>
</member><member name="M:WinControls.ListView.ContainerListView.SelectAll">
	<summary>
 Selects all Items in the control.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.SetEditedObject(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Sets the ContainerListViewObject currently in edit mode.
 </summary>
	<param name="aClObj">The ContainerListViewObject to set.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.SetFocusedObject(WinControls.ListView.ContainerListViewObject)">
	<summary>
 Sets the Focused Item.
 </summary>
	<param name="aClObj"></param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.Sort">
	<summary>
 Sort all of the Items in the control.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.Sort(System.Int32)">
	<summary>
 Sort all of the Items in the control.
 </summary>
	<param name="aIndex">The zero-based column index to sort on.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.WndProc(System.Windows.Forms.Message@)">
	<summary>
 Processes Windows messages.
 </summary>
	<param name="m">A Windows message.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.ContainerListView.WriteXml(System.Xml.XmlWriter)">
	<summary>
 Converts an object into its XML representation.
 </summary>
	<param name="aWriter">The XmlWriter stream to which the object is serialized.</param>
	<remarks>See the <see cref="T:System.Xml.Serialization.IXmlSerializable"/> interface for more details.</remarks>
</member><member name="M:WinControls.ListView.ContainerListView._selectiveSelection(System.Int32)">
	<summary>
 This is a special case and will be used when the user clicks on an item
 while the control key is pressed or presses the space bar button while an
 item has the focus.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.ContainerListView">
	<summary>
 ContainerListView Control.
 Provides a listview control in detail mode that provides containers for each cell in a row/column.
 </summary>
	<remarks>The container can hold almost any object that derives directly or indirectly from Control.</remarks>
</member><member name="M:WinControls.ListView.Design.TreeListViewDesigner.#ctor">
	<summary>
 Creates a New instance of TreeListViewDesigner.
 </summary>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Design.TreeListViewDesigner.Control">
	<summary>
 Shadowed.  Gets the TreeListView the designer is designing.
 </summary>
	<value>A TreeListView" /&gt; control.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Design.TreeListViewDesigner.Verbs">
	<summary>
 Overriden.  Gets the design-time verbs supported by the component that is associated with the ContainerListView.
 </summary>
	<value>A DesignerVerbCollection of DesignerVerb objects, or a null reference (Nothing in Visual Basic) if no designer verbs are available.</value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Design.TreeListViewDesigner.DoDefaultAction">
	<summary>
 Overriden.  Creates a method signature in the source code file for the default event on the component and navigates the user's cursor to that location.
 </summary>
	<remarks>In Windows Forms and Web Forms designers, this method is invoked when a user double-clicks a component.</remarks>
</member><member name="M:WinControls.ListView.Design.TreeListViewDesigner.GetHitTest(System.Drawing.Point)">
	<summary>
 Overriden.  Indicates whether a mouse click at the specified point should be handled by the control.
 </summary>
	<param name="point">A Point" /&gt; indicating the position at which the mouse was clicked, in screen coordinates. </param>
	<returns><c>TRUE</c> if a click at the specified point is to be handled by the control; otherwise, <c>FALSE</c>.</returns>
	<remarks>
 The GetHitTest method determines whether a click at the specified point should be passed to the control, while the control is in design mode. 
 You can override and implement this method to enable your control to receive clicks in the design-time environment.
 </remarks>
</member><member name="T:WinControls.ListView.Design.TreeListViewDesigner">
	<summary>
 TreeListViewDesigner Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.#ctor">
	<summary>
 Creates a New instance of TreeListNode.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.#ctor(System.String)">
	<summary>
 Creates a New instance of TreeListNode.
 </summary>
	<param name="aText">The Text of the new TreeListNode.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.#ctor(System.String,System.Int32,System.Int32)">
	<summary>
 Creates a New instance of TreeListNode.
 </summary>
	<param name="aText">The Text of the new TreeListNode.</param>
	<param name="aImageIndex">The ImageIndex of the TreeListNode.</param>
	<param name="aSelImageIndex">The SelectedImageIndex of the TreeListNode.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.#ctor(WinControls.ListView.TreeListView)">
	<summary>
 Creates a New instance of TreeListNode.
 </summary>
	<param name="aTree">The TreeListView that owns this TreeListNode.</param>
	<remarks>This constructor is used for creating the TreeListView's Nodes collection.</remarks>
</member><member name="P:WinControls.ListView.TreeListNode.Branch">
	<summary>
 Gets the branch that this TreeListNode represents (this node and ALL child nodes).
 </summary>
	<value>A TreeListNodeBranch object.</value>
	<remarks>
 A branch consists of the current node and ALL child nodes(recursive) beneath it.  The current TreeListNode is considered the 
 root of the branch.
 </remarks>
</member><member name="P:WinControls.ListView.TreeListNode.ChildrenCount">
	<summary>
 Gets or Sets the count of all the children.
 </summary>
	<value>An integer.</value>
	<remarks>This code is not intended to be called directly from your code.  It is for internal use only.</remarks>
</member><member name="P:WinControls.ListView.TreeListNode.ExpandedCount">
	<summary>
 Gets or Sets the count of the potentially visible children.
 </summary>
	<value>An integer.</value>
	<remarks>This code is not intended to be called directly from your code.  It is for internal use only.</remarks>
</member><member name="P:WinControls.ListView.TreeListNode.FirstChildNode">
	<summary>
 Gets the first Child in the collection.
 </summary>
	<value>The first Child.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.FullPath">
	<summary>
 Gets the path from the Root TreeListNode to the current TreeListNode.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.HasParent">
	<summary>
 Overriden.  Determines if the current TreeListNode has a parent node.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.Index">
	<summary>
 Overriden.  Gets the zero-based position of the TreeListNode within the TreeListNode collection.
 </summary>
	<value>
 The zero-based index of the item within Collection. If the item is not associated with a collection control, this property returns -1.
 </value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.IsExpanded">
	<summary>
 Gets a value that determines if a TreeListNode is in an expanded state.
 </summary>
	<value><c>TRUE</c> if the TreeListNode is in an expanded state;  otherwise <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.IsRootNode">
	<summary>
 Gets a value that determines if the TreeListNode is a root (topmost) Node.
 </summary>
	<value><c>TRUE</c> if the TreeListNode is the root (topmost) node in the heirarchy.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.IsVirtualRootNode">
	<summary>
 Gets a value that determines if the TreeListNode is a virtual rootNode.
 </summary>
	<value><c>TRUE</c> if the TreeListNode is the virtual root node in the heirarchy.</value>
	<remarks>
 Virtual root nodes are never displayed in the TreeListView control.  Virtual roots are the owner of the TreeListNodeCollection of the TreeListView.  
 Anyone using this property outside of the TreeListView or TreeListNode class will always get a result of <c>FALSE</c>.  
 This is a convenience property only and is used by the inner methods of the TreeListNode and TreeListView classes.
 </remarks>
</member><member name="P:WinControls.ListView.TreeListNode.LastChildNode">
	<summary>
 Gets the Last child in the list.
 </summary>
	<value>The Last child.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.Level">
	<summary>
 Gets the zero-based Level the Node is at from the RootNode.
 </summary>
	<value>
 An Integer representing the zero-based Level of the Node from the RootNode.
 </value>
	<remarks>
 For Example, if a Nodes' path is 'One\Two\Three', with 'Three' being the current Node, then the current Node's Level is 2 (not 3) because the levels are zero-based.
 You could also look at it as being 2 nodes away from the RootNode.
 </remarks>
</member><member name="P:WinControls.ListView.TreeListNode.Nodes">
	<summary>
 Gets the child Nodes of the current Node.
 </summary>
	<value>A TreeListNode collection.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.RootNode">
	<summary>
 The topmost Node that this Node and all Nodes in it's subtree are directly or indirectly rooted to.
 </summary>
	<value>A TreeListNode representing the topmost Node.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.RowIndex">
	<summary>
 Gets the zero-based Index of the virtual Row the node belongs to in the TreeListView.  This is NOT an index into the TreeListNode collection!
 </summary>
	<value>An Integer value representing the virtual Row the node belongs to in the TreeListView.  If the node is not a member of a TreeListView OR it is not visible, then -1 is returned.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.NextSiblingNode">
	<summary>
 Gets the Next Node in the collection.
 </summary>
	<value>A TreeListNode representing the Next node in the collection.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.ParentNode">
	<summary>
 Gets the ParentNode of the current node.
 </summary>
	<value>A TreeListNode object.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.PreviousSiblingNode">
	<summary>
 Gets the Previous node in the collection.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.Selected">
	<summary>
 Overriden.  Gets or sets a value indicating whether the item is selected.
 </summary>
	<value><c>TRUE</c> if the item is selected; otherwise, <c>FALSE</c>.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.SelectedImageIndex">
	<summary>
 Gets or sets the index of the image that is displayed for the TreeListNode when it is in a selected state.
 </summary>
	<value>The zero-based index of the image in the ImageList that is displayed for the TreeListNode when it is in a selected state. The default is -1.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.ListView">
	<summary>
 Gets the parent TreeListView the TreeListNode is assigned to.
 </summary>
	<value>A TreeListView object; othewise <c>NOTHING</c> if the node is not assigned.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.VisibleChildren">
	<summary>
 Gets or Sets the count of the visible children.
 </summary>
	<value>An integer.</value>
	<remarks>This code is not intended to be called directly from your code.  It is for internal use only.</remarks>
</member><member name="M:WinControls.ListView.TreeListNode.CheckNodes(System.Boolean,System.Boolean)">
	<summary>
 Check or UnCheck all the nodes in the Node collection.
 </summary>
	<param name="aChecked"><c>TRUE</c> to check all the nodes; otherwise <c>FALSE</c> to uncheck them.</param>
	<param name="aImmediateOnly">Optional.  <c>TRUE</c> to check only the immediate children; otherwise <c>FALSE</c> to check all children.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.Clone">
	<summary>
 Overriden.  Copies the TreeListNode and the entire subtree rooted at this node.
 </summary>
	<returns>A cloned TreeListNode and it's entire subtree.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.Collapse">
	<summary>
 Collapses the TreeListNode.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.CollapseAll">
	<summary>
 Collapses the current Node and all of its children.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.Expand">
	<summary>
 Expands the current TreeListNode.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.ExpandAll">
	<summary>
 Expands the current TreeListNode and all of its children.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.GetNodeCount(System.Boolean)">
	<summary>
 Returns the number of child tree nodes.
 </summary>
	<param name="aIncludeSubTrees"><c>TRUE</c> if the resulting count includes all nodes indirectly rooted at this node; otherwise <c>FALSE</c>.</param>
	<returns>An integer representing the number of child nodes.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.GetNodesInPath">
	<summary>
 Returns all the Nodes in the path from the RootNode to the current Node.  The Nodes are indexed in the array starting from the RootNode.
 </summary>
	<returns>a TreeListNode array containing the Nodes in the path of the current node.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.IsNodeInBranch(WinControls.ListView.TreeListNode)">
	<summary>
 Returns a value that determines if the specified node is a child (direct or indirect) somewhere in this Node's branch.
 </summary>
	<param name="aNode">The TreeListNode to search for in the path of the current node.</param>
	<returns><c>TRUE</c> if the specified TreeListNode is in the current node's branch; otherwise <c>FALSE</c> if it is not.</returns>
	<remarks>
 This is the opposite of IsNodeInPath.  Instead of traversing up the nodes to find the path, this function traverses down (starting from this node) 
 to determine if the specified node is a child somewhere in the branch.
 </remarks>
</member><member name="M:WinControls.ListView.TreeListNode.IsNodeInPath(WinControls.ListView.TreeListNode)">
	<summary>
 Returns a value that determines if the specified node is in the path of the current node.
 </summary>
	<param name="aNode">The TreeListNode to search for in the path of the current node.</param>
	<returns><c>TRUE</c> if the specified TreeListNode is in the current node's path; otherwise <c>FALSE</c> if it is not.</returns>
	<remarks>
 This is the opposite of IsNodeInBranch.  Instead of traversing down the nodes to find the path, this function traverses up (starting from this node) 
 to determine if the specified node is somewhere in this node's path.
 </remarks>
</member><member name="M:WinControls.ListView.TreeListNode.Parse(System.Xml.XmlNode)">
	<summary>
 Returns a TreeListNode initialized with the property data in the XmlNode.
 </summary>
	<param name="aXmlNode">The XmlNode containing the property data.</param>
	<returns>
 A TreeListNode set with the passed in property data; otherwise, a new TreeListNode set with defaults.
 </returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.PropagateNodeChange(System.Int32,System.Int32,System.Int32)">
	<summary>
 Informs the Node (and it's parent) of any changes in it's children.  For internal use only.
 </summary>
	<param name="aTotalCountDelta">The Total number of children.</param>
	<param name="aVisibleChildrenDelta">The total number of visible children.</param>
	<param name="expChildren">The number of currently expanded children.</param>
	<remarks>This code is for internal use only and is not intended to be called from your code.  Calling this method externally may have an adverse effect on code that uses this class.</remarks>
</member><member name="M:WinControls.ListView.TreeListNode.Remove">
	<summary>
 Removes the current tree node from the TreeListView control.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.SetChildNodesCheckBox(System.Boolean,System.Boolean)">
	<summary>
 Checks or unchecks all child TreeListNodes.
 </summary>
	<param name="aValue"><c>TRUE</c> to check the child nodes; otherwise <c>FALSE</c> to uncheck them.</param>
	<param name="aIncludeAllChildNodes"><c>TRUE</c> to go down and include all child nodes; <c>FALSE</c> to check only the immediate child nodes.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.Toggle">
	<summary>
 Toggles the current Node.  If the Node is expanded it will collapse and vice-versa.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.SetParentNode(WinControls.ListView.TreeListNode)">
	<summary>
 Sets the ParentNode of the current Node.
 </summary>
	<param name="aPNode">The ParentNode of the current Node.</param>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.SetParent(WinControls.ListView.ContainerListView)">
	<summary>
 Assigns the TreeView_PA that the Item belongs to.
 </summary>
	<param name="aTreeView">The TreeView_PA that owns the item.</param>
	<remarks>
 This code is for internal use only and is not intended to be called from your code.  
 Calling this method externally may have an adverse effect on code that uses this class.
 </remarks>
</member><member name="M:WinControls.ListView.TreeListNode.TreeListNodeBranch.#ctor(WinControls.ListView.TreeListNode)">
	<summary>
 Creates a New instance of TreeListNodeBranch.
 </summary>
	<param name="aNode">The root TreeListNode of the Branch.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.TreeListNodeBranch.HighLightBackColor">
	<summary>
 Gets or Sets the highlighted branch BackColor.
 </summary>
	<value>A Color value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.TreeListNodeBranch.HighLighted">
	<summary>
 Gets or Sets a value that determines if the branch should be highlighted or not.
 </summary>
	<value><c>TRUE</c> if the branch should be highlighted; otherwise <c>FALSE</c>.</value>
	<remarks>Highlighted DOES NOT mean the nodes are selected.</remarks>
</member><member name="P:WinControls.ListView.TreeListNode.TreeListNodeBranch.HighLightFont">
	<summary>
 Gets or Sets the highlighted branch Font.
 </summary>
	<value>A Font value.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.TreeListNode.TreeListNodeBranch.HighLightForeColor">
	<summary>
 Gets or Sets the highlighted branch ForeColor.
 </summary>
	<value>A Color value.</value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.TreeListNodeBranch.GetBranchNodes">
	<summary>
 Returns every TreeListNode belonging to this branch.
 </summary>
	<returns>An array of TreeListNodes.</returns>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.TreeListNodeBranch.Refresh">
	<summary>
 Refreshes all branch TreeListNodes.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.TreeListNode.TreeListNodeBranch.SetProperty(System.String,System.Object)">
	<summary>
 Sets the specified Property on all Branch nodes.
 </summary>
	<param name="aPropName">The property name whose value to set on all branch nodes.</param>
	<param name="aValue">The value to set.</param>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.TreeListNode.TreeListNodeBranch">
	<summary>
 TreeListNodeBranch Class.
 </summary>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.TreeListNode">
	<summary>
 TreeListNode Class.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.ContainerListViewComparer.#ctor">
	<summary>
 Creates a New instance of ContainerListViewComparer.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.ContainerListViewComparer.#ctor(System.Int32,System.Windows.Forms.SortOrder)">
	<summary>
 Creates a New instance of ContainerListViewComparer.
 </summary>
	<param name="aCol">The Index of the column clicked in the ListView.</param>
	<param name="aSortOrder">The SortOrder.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Helpers.ContainerListViewComparer.ColumnIndex">
	<summary>
 Gets or Sets index of the ClickedColumn.
 </summary>
	<value>An Integer representing the Index of the Column clicked in the ListView.</value>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Helpers.ContainerListViewComparer.Order">
	<summary>
Gets or Sets the SortOrder.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.ContainerListViewComparer.Compare(System.Object,System.Object)">
	<summary>
 Compares two objects and returns a value indicating whether one is less than, equal to or greater than the other
 </summary>
	<param name="x">First object to compare.</param>
	<param name="y">Second object to compare.</param>
	<returns>A Integer value indicating whether one is less than, equal to or greater than the other.</returns>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Helpers.ContainerListViewComparer">
	<summary>
 ContainerListViewComparer Class.  Helper class used to sort any ListView by a specific column.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.PropInfoViewComparer.#ctor">
	<summary>
 Creates a New instance of ContainerListViewComparer.
 </summary>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.PropInfoViewComparer.#ctor(System.Windows.Forms.SortOrder)">
	<summary>
 Creates a New instance of ContainerListViewComparer.
 </summary>
	<param name="aSortOrder">The SortOrder.</param>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.Helpers.PropInfoViewComparer.Order">
	<summary>
Gets or Sets the SortOrder.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:WinControls.ListView.Helpers.PropInfoViewComparer.Compare(System.Object,System.Object)">
	<summary>
 Compares two objects and returns a value indicating whether one is less than, equal to or greater than the other
 </summary>
	<param name="aObj1">First object to compare.</param>
	<param name="aObj2">Second object to compare.</param>
	<returns>A Integer value indicating whether one is less than, equal to or greater than the other.</returns>
	<remarks></remarks>
</member><member name="T:WinControls.ListView.Helpers.PropInfoViewComparer">
	<summary>
 PropInfoViewComparer Class.  Helper class used to sort arrays or collections of PropertyInfo objects.
 </summary>
	<remarks></remarks>
</member><member name="P:WinControls.ListView.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:WinControls.ListView.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:WinControls.ListView.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
</members>
</doc>